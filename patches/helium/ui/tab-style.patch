--- a/chrome/browser/ui/tabs/tab_style.cc
+++ b/chrome/browser/ui/tabs/tab_style.cc
@@ -18,17 +18,20 @@ namespace {
 
 // Thickness in DIPs of the separator painted on the left and right edges of
 // the tab.
-constexpr int kChromeRefreshSeparatorThickness = 2;
-constexpr int kChromeRefreshSeparatorHorizontalMargin = 2;
+constexpr int kChromeRefreshSeparatorThickness = 1;
+constexpr int kChromeRefreshSeparatorHorizontalMargin = 1;
 // TODO (crbug.com/1451400): This constant should be in LayoutConstants.
 constexpr int kChromeRefreshSeparatorHeight = 16;
 
 // The padding from the top of the tab to the content area.
 constexpr int kChromeRefreshTabVerticalPadding = 6;
-constexpr int kChromeRefreshTabHorizontalPadding = 8;
+constexpr int kChromeRefreshTabHorizontalPadding = 7;
 
 // The standard tab width is 232 DIP, excluding separators and overlap.
-constexpr int kTabWidth = 232;
+constexpr int kTabWidth = 200;
+
+// Split tabs need more space to be readable
+constexpr int kSplitTabWidth = 250;
 
 }  // namespace
 
@@ -42,7 +45,7 @@ int TabStyle::GetStandardWidth(const boo
   if (is_split) {
     // Split tabs appear as half width with one bottom extension. They also must
     // include half the tab overlap as the tabs fill the space between them.
-    return kTabWidth / 2 + GetBottomCornerRadius() + GetTabOverlap() / 2;
+    return kSplitTabWidth / 2 + GetBottomCornerRadius() + GetTabOverlap() / 2;
   } else {
     // The full width includes two extensions with the bottom corner radius.
     return kTabWidth + 2 * GetBottomCornerRadius();
@@ -104,11 +107,11 @@ int TabStyle::GetMinimumInactiveWidth()
 }
 
 int TabStyle::GetTopCornerRadius() const {
-  return 10;
+  return 8;
 }
 
 int TabStyle::GetBottomCornerRadius() const {
-  return 12;
+  return 8;
 }
 
 int TabStyle::GetTabOverlap() const {
--- a/chrome/browser/ui/views/tabs/tab_style_views.cc
+++ b/chrome/browser/ui/views/tabs/tab_style_views.cc
@@ -214,8 +214,6 @@ SkPath TabStyleViewsImpl::GetPath(TabSty
   CHECK(tab());
   const int stroke_thickness = GetStrokeThickness(force_active);
 
-  const TabStyle::TabSelectionState state = GetSelectionState();
-
   // We'll do the entire path calculation in aligned pixels.
   // TODO(dfried): determine if we actually want to use `stroke_thickness` as
   // the inset in this case.
@@ -229,11 +227,7 @@ SkPath TabStyleViewsImpl::GetPath(TabSty
   float extension_corner_radius = tab_style()->GetBottomCornerRadius() * scale;
 
   // Selected, hover, and inactive tab fills are a detached squarcle tab.
-  if ((path_type == TabStyle::PathType::kFill &&
-       state != TabStyle::TabSelectionState::kActive) ||
-      path_type == TabStyle::PathType::kHighlight ||
-      path_type == TabStyle::PathType::kInteriorClip ||
-      path_type == TabStyle::PathType::kHitTest) {
+  if ((false)) {
     float top_left_corner_radius = content_corner_radius;
     float top_right_corner_radius = content_corner_radius;
     float bottom_left_corner_radius = content_corner_radius;
--- a/chrome/browser/ui/views/tabs/tab.cc
+++ b/chrome/browser/ui/views/tabs/tab.cc
@@ -1161,9 +1161,7 @@ void Tab::UpdateIconVisibility() {
   // left that needs to be considered.
   const int close_button_width = GetLayoutConstant(TAB_CLOSE_BUTTON_SIZE) +
                                  GetLayoutConstant(TAB_AFTER_TITLE_PADDING);
-  const bool large_enough_for_close_button =
-      available_width >= (touch_ui ? kTouchMinimumContentsWidthForCloseButtons
-                                   : kMinimumContentsWidthForCloseButtons);
+  const bool large_enough_for_close_button = mouse_hovered_;
 
   if (IsActive()) {
 #if BUILDFLAG(IS_CHROMEOS)
@@ -1209,6 +1207,10 @@ void Tab::UpdateIconVisibility() {
         large_enough_for_close_button;
     if (base::CommandLine::ForCurrentProcess()->HasSwitch("hide-tab-close-buttons"))
       showing_close_button_ = false;
+
+    if (closing_) {
+      showing_close_button_ = false;
+    }
     if (showing_close_button_) {
       available_width -= close_button_width;
     }

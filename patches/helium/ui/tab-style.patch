--- a/chrome/browser/ui/tabs/tab_style.cc
+++ b/chrome/browser/ui/tabs/tab_style.cc
@@ -18,13 +18,13 @@ namespace {
 
 // Thickness in DIPs of the separator painted on the left and right edges of
 // the tab.
-constexpr int kChromeRefreshSeparatorThickness = 2;
+constexpr int kChromeRefreshSeparatorThickness = 1;
 constexpr int kChromeRefreshSeparatorHorizontalMargin = 2;
 // TODO (crbug.com/1451400): This constant should be in LayoutConstants.
 constexpr int kChromeRefreshSeparatorHeight = 16;
 
 // The padding from the top of the tab to the content area.
-constexpr int kChromeRefreshTabVerticalPadding = 6;
+constexpr int kChromeRefreshTabVerticalPadding = 7;
 constexpr int kChromeRefreshTabHorizontalPadding = 8;
 
 // The standard tab width is 232 DIP, excluding separators and overlap.
@@ -97,11 +97,11 @@ int TabStyle::GetMinimumInactiveWidth()
 }
 
 int TabStyle::GetTopCornerRadius() const {
-  return 10;
+  return 8;
 }
 
 int TabStyle::GetBottomCornerRadius() const {
-  return 12;
+  return 8;
 }
 
 int TabStyle::GetTabOverlap() const {
--- a/chrome/browser/ui/views/tabs/tab_group_highlight.cc
+++ b/chrome/browser/ui/views/tabs/tab_group_highlight.cc
@@ -47,33 +47,7 @@ void TabGroupHighlight::OnPaint(gfx::Can
 }
 
 SkPath TabGroupHighlight::GetPath() const {
-  // This path imitates the shape of a tab (see GM2TabStyle::GetPath()). It
-  // doesn't reuse the exact same GetPath() function because it doesn't need
-  // much of the complexity there. Group highlights only appear on group drag,
-  // which is a well-scoped interaction. A dragging group doesn't nestle in with
-  // the tabs around it, so there are no special cases needed when determining
-  // its shape.
-  const int corner_radius = TabStyle::Get()->GetBottomCornerRadius();
-  const int top = GetLayoutConstant(TAB_STRIP_PADDING);
-
   SkPath path;
-  path.moveTo(0, bounds().height());
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCCW, corner_radius,
-             bounds().height() - corner_radius);
-  path.lineTo(corner_radius, top + corner_radius);
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCW, 2 * corner_radius, top);
-  path.lineTo(bounds().width() - 2 * corner_radius, top);
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCW, bounds().width() - corner_radius,
-             top + corner_radius);
-  path.lineTo(bounds().width() - corner_radius,
-              bounds().height() - corner_radius);
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCCW, bounds().width(), bounds().height());
-  path.close();
-
   return path;
 }
 
--- a/chrome/browser/ui/views/tabs/tab_style_views.cc
+++ b/chrome/browser/ui/views/tabs/tab_style_views.cc
@@ -202,8 +202,6 @@ SkPath TabStyleViewsImpl::GetPath(TabSty
   CHECK(tab());
   const int stroke_thickness = GetStrokeThickness(force_active);
 
-  const TabStyle::TabSelectionState state = GetSelectionState();
-
   // We'll do the entire path calculation in aligned pixels.
   // TODO(dfried): determine if we actually want to use `stroke_thickness` as
   // the inset in this case.
@@ -217,11 +215,7 @@ SkPath TabStyleViewsImpl::GetPath(TabSty
   float extension_corner_radius = tab_style()->GetBottomCornerRadius() * scale;
 
   // Selected, hover, and inactive tab fills are a detached squarcle tab.
-  if ((path_type == TabStyle::PathType::kFill &&
-       state != TabStyle::TabSelectionState::kActive) ||
-      path_type == TabStyle::PathType::kHighlight ||
-      path_type == TabStyle::PathType::kInteriorClip ||
-      path_type == TabStyle::PathType::kHitTest) {
+  if ((true)) {
     float top_left_corner_radius = content_corner_radius;
     float top_right_corner_radius = content_corner_radius;
     float bottom_left_corner_radius = content_corner_radius;

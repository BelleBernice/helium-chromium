--- a/chrome/browser/ui/views/omnibox/rounded_omnibox_results_frame.cc
+++ b/chrome/browser/ui/views/omnibox/rounded_omnibox_results_frame.cc
@@ -36,7 +36,7 @@
 namespace {
 
 // Value from the spec controlling appearance of the shadow.
-constexpr int kElevation = 16;
+constexpr int kElevation = 8;
 
 #if !defined(USE_AURA)
 
@@ -232,8 +232,7 @@ RoundedOmniboxResultsFrame::RoundedOmnib
   contents_host_->layer()->SetFillsBoundsOpaquely(false);
 
   // Use rounded corners.
-  const int corner_radius = views::LayoutProvider::Get()->GetCornerRadiusMetric(
-      views::ShapeContextTokens::kOmniboxExpandedRadius);
+  const int corner_radius = 12.0f;
   contents_host_->layer()->SetRoundedCornerRadius(
       gfx::RoundedCornersF(corner_radius));
   contents_host_->layer()->SetIsFastRoundedCorner(true);
@@ -287,7 +286,7 @@ gfx::Insets RoundedOmniboxResultsFrame::
   if (ui::TouchUiController::Get()->touch_ui()) {
     return gfx::Insets::TLBR(6, 1, 5, 1);
   }
-  return gfx::Insets::VH(5, 6);
+  return gfx::Insets::VH(3, 10);
 }
 
 // static
--- a/chrome/browser/ui/views/omnibox/omnibox_result_view.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_result_view.cc
@@ -103,7 +103,7 @@ class OmniboxResultViewButton : public v
 BEGIN_METADATA(OmniboxResultViewButton)
 END_METADATA
 
-constexpr float kIPHBackgroundBorderRadius = 8;
+constexpr float kIPHBackgroundBorderRadius = 6;
 
 }  // namespace
 
@@ -190,9 +190,6 @@ OmniboxResultView::OmniboxResultView(Omn
 
   SetLayoutManager(std::make_unique<views::FillLayout>());
 
-  selection_indicator_ =
-      AddChildView(std::make_unique<OmniboxResultSelectionIndicator>());
-
   local_answer_header_and_suggestion_and_buttons_ =
       AddChildView(std::make_unique<views::View>());
   local_answer_header_and_suggestion_and_buttons_
@@ -296,7 +293,7 @@ OmniboxResultView::OmniboxResultView(Omn
               &OmniboxResultView::ButtonPressed, base::Unretained(this),
               OmniboxPopupSelection::FOCUSED_BUTTON_REMOVE_SUGGESTION)));
   remove_suggestion_button_->SetProperty(views::kMarginsKey,
-                                         gfx::Insets::TLBR(0, 0, 0, 16));
+                                         gfx::Insets::TLBR(0, 0, 0, 8));
   views::InstallCircleHighlightPathGenerator(remove_suggestion_button_);
   auto* const remove_focus_ring =
       views::FocusRing::Get(remove_suggestion_button_);
@@ -351,10 +348,9 @@ std::unique_ptr<views::Background> Omnib
         /*for_border_thickness=*/0);
   }
 
-  const float half_row_height = OmniboxMatchCellView::kRowHeight / 2;
-  gfx::RoundedCornersF radii = {0, half_row_height, half_row_height, 0};
   return views::CreateRoundedRectBackground(
-      GetOmniboxBackgroundColorId(part_state), radii);
+      GetOmniboxBackgroundColorId(part_state),
+      kIPHBackgroundBorderRadius);
 }
 
 void OmniboxResultView::SetMatch(const AutocompleteMatch& match) {
@@ -496,14 +492,6 @@ void OmniboxResultView::ApplyThemeAndRef
           popup_view_->controller()->client()->GetTemplateURLService())) {
     const OmniboxPopupSelection::LineState line_state =
         popup_view_->GetSelection().state;
-    selection_indicator_->SetVisible(
-        selected &&
-        (line_state == OmniboxPopupSelection::LineState::NORMAL ||
-         line_state == OmniboxPopupSelection::LineState::KEYWORD_MODE));
-  } else {
-    selection_indicator_->SetVisible(selected &&
-                                     popup_view_->GetSelection().state ==
-                                         OmniboxPopupSelection::NORMAL);
   }
 
   if (suggestion_view_->iph_link_view()->GetVisible()) {
--- a/chrome/browser/ui/views/omnibox/omnibox_row_view.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_row_view.cc
@@ -117,12 +117,7 @@ views::View* OmniboxRowView::GetActiveAu
 }
 
 gfx::Insets OmniboxRowView::GetInsets() const {
-  if (result_view_->GetThemeState() == OmniboxPartState::IPH) {
-    int LRInsets = OmniboxMatchCellView::kIphOffset;
-    return gfx::Insets::TLBR(8, LRInsets, 8, LRInsets);
-  }
-
-  return gfx::Insets::TLBR(0, 0, 0, 16);
+  return gfx::Insets::TLBR(2, 6, 0, 6);
 }
 
 BEGIN_METADATA(OmniboxRowView)
--- a/chrome/browser/ui/views/omnibox/omnibox_match_cell_view.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_match_cell_view.cc
@@ -369,8 +369,7 @@ void OmniboxMatchCellView::SetIcon(const
       match.type == AutocompleteMatchType::HISTORY_CLUSTER;
   const bool is_instant_keyword_row =
       AutocompleteMatch::IsFeaturedSearchType(match.type);
-  if (is_pedal_suggestion_row || is_journeys_suggestion_row ||
-      is_instant_keyword_row) {
+  if ((false)) {
     // When a PEDAL suggestion has been split out to its own row, apply a square
     // background with a distinctive color to the respective icon. Journeys
     // suggestion rows should also receive the same treatment.
@@ -588,7 +587,7 @@ int OmniboxMatchCellView::GetImageIndent
   // align with any other UI; it's just arbitrarily chosen by UX. Hence, it's
   // not derived from other matches' `indent` below.
   if (layout_style_ == LayoutStyle::IPH_SUGGESTION) {
-    return 2;
+    return 0;
   }
 
   // The entity, answer, and icon images are horizontally centered within their
@@ -599,12 +598,13 @@ int OmniboxMatchCellView::GetImageIndent
   // b) Entities, answers, and icons continue to be center-aligned.
   // c) Regardless of the state of those other features and their widths.
   // This applies to both touch-UI and non-touch-UI.
-  int indent = 16 + kUniformRowHeightIconSize / 2 - kImageBoundsWidth / 2;
+  int indent = 6.5f + kUniformRowHeightIconSize / 2 - kImageBoundsWidth / 2;
 
   return indent;
 }
 
 int OmniboxMatchCellView::GetTextIndent() const {
+  return 35;
   // Text indent is added to the `OmniboxMatchCellView::GetInsets()`. It is not
   // added to the image position & size.
 
--- a/chrome/browser/ui/views/omnibox/omnibox_match_cell_view.h
+++ b/chrome/browser/ui/views/omnibox/omnibox_match_cell_view.h
@@ -36,7 +36,7 @@ class OmniboxMatchCellView : public view
 
   // The height of the standard 1-line match row. Multiline & IPH matches have
   // larger heights.
-  static constexpr int kRowHeight = 40;
+  static constexpr int kRowHeight = 32;
 
   // The width of icon, answer, and entity image bounds. These images are
   // smaller than this bounds; they'll be centered within the bounds.
--- a/chrome/browser/ui/views/omnibox/omnibox_popup_view_views.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_popup_view_views.cc
@@ -572,7 +572,7 @@ gfx::Rect OmniboxPopupViewViews::GetTarg
   // This extra padding is not added if the results section has no height
   // (result set is empty or all results are hidden).
   if (popup_height != 0) {
-    constexpr int kExtraBottomPadding = 8;
+    constexpr int kExtraBottomPadding = 6;
     popup_height += kExtraBottomPadding;
   }
 
--- a/chrome/browser/ui/views/omnibox/omnibox_suggestion_button_row_view.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_suggestion_button_row_view.cc
@@ -152,6 +152,7 @@ class OmniboxSuggestionRowButton : publi
       CHECK(v);
       return v->GetVisible() && v->popup_view_->GetSelection() == v->selection_;
     }));
+    focus_ring->SetOutsetFocusRingDisabled(true);
     focus_ring->SetColorId(kColorOmniboxResultsFocusIndicator);
 
     GetViewAccessibility().SetRole(ax::mojom::Role::kListBoxOption);
@@ -235,7 +236,7 @@ OmniboxSuggestionButtonRowView::OmniboxS
     OmniboxPopupViewViews* popup_view,
     int model_index)
     : popup_view_(popup_view), model_index_(model_index) {
-  const auto insets = gfx::Insets::TLBR(6, 0, 6, 0);
+  const auto insets = gfx::Insets::TLBR(0, 0, 0, 0);
   SetLayoutManager(std::make_unique<views::FlexLayout>())
       ->SetCrossAxisAlignment(views::LayoutAlignment::kCenter)
       .SetCollapseMargins(true)

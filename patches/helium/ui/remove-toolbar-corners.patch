--- a/chrome/browser/ui/views/toolbar/toolbar_view.cc
+++ b/chrome/browser/ui/views/toolbar/toolbar_view.cc
@@ -269,18 +269,6 @@ void ToolbarView::Init() {
   aura::WindowOcclusionTracker::ScopedPause pause_occlusion;
 #endif
 
-  // The background views must be behind container_view_.
-  background_view_left_ = AddChildViewAt(std::make_unique<View>(), 0);
-  background_view_left_->SetBackground(
-      std::make_unique<TabstripLikeBackground>(browser_view_));
-  background_view_right_ = AddChildViewAt(std::make_unique<View>(), 0);
-  background_view_right_->SetBackground(
-      std::make_unique<TabstripLikeBackground>(browser_view_));
-
-  active_state_subscription_ =
-      GetWidget()->RegisterPaintAsActiveChangedCallback(base::BindRepeating(
-          &ToolbarView::ActiveStateChanged, base::Unretained(this)));
-
   auto location_bar = std::make_unique<LocationBarView>(
       browser_, browser_->profile(), browser_->command_controller(), this,
       display_mode_ != DisplayMode::NORMAL);
@@ -834,13 +822,6 @@ void ToolbarView::Layout(PassKey) {
   // The container view should be the exact same size/position as ToolbarView.
   container_view_->SetSize(size());
 
-  // The background views should be behind the top-left and top-right corners
-  // of the container_view_.
-  const int corner_radius = GetLayoutConstant(TOOLBAR_CORNER_RADIUS);
-  background_view_left_->SetBounds(0, 0, corner_radius, corner_radius);
-  background_view_right_->SetBounds(width() - corner_radius, 0, corner_radius,
-                                    corner_radius);
-
   if (display_mode_ == DisplayMode::CUSTOM_TAB) {
     custom_tab_bar_->SetBounds(0, 0, width(),
                                custom_tab_bar_->GetPreferredSize().height());
@@ -850,7 +831,6 @@ void ToolbarView::Layout(PassKey) {
 
   if (display_mode_ == DisplayMode::NORMAL) {
     LayoutCommon();
-    UpdateClipPath();
   }
 
   if (toolbar_controller_) {
@@ -888,37 +868,6 @@ void ToolbarView::OnThemeChanged() {
   SchedulePaint();
 }
 
-void ToolbarView::UpdateClipPath() {
-  const int corner_radius = GetLayoutConstant(TOOLBAR_CORNER_RADIUS);
-  const gfx::Rect local_bounds = GetLocalBounds();
-  SkPath path;
-  // The bottom of the toolbar may be clipped more than necessary in
-  // certain scale factor so adds extra 2dp so that even if the origin
-  // and the height are rounded down, we still can paint til the
-  // bottom of the toolbar. The similar logic is applied to
-  // BookmarkBarView which can be the bottom component within the
-  // TopContainerView, and TopContainerView which is the parent and
-  // can also clip the paint region for child views.
-  // TODO(crbug.com/41344902): Remove this hack once the pixel canvas is
-  // enabled on all aura platforms.
-  const int extended_height = local_bounds.height() + 2;
-  path.moveTo(0, local_bounds.height());
-  path.lineTo(0, corner_radius);
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCW, corner_radius, 0);
-  path.lineTo(local_bounds.width() - corner_radius, 0);
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCW, local_bounds.width(), corner_radius);
-  path.lineTo(local_bounds.width(), extended_height);
-  path.lineTo(0, extended_height);
-  container_view_->SetClipPath(path);
-}
-
-void ToolbarView::ActiveStateChanged() {
-  background_view_left_->SchedulePaint();
-  background_view_right_->SchedulePaint();
-}
-
 void ToolbarView::NewTabButtonPressed(const ui::Event& event) {
   chrome::ExecuteCommand(browser_view_->browser(), IDC_NEW_TAB);
   UMA_HISTOGRAM_ENUMERATION("Tab.NewTab",

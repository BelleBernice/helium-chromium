--- a/components/helium_services/pref_names.h
+++ b/components/helium_services/pref_names.h
@@ -7,12 +7,20 @@
 
 namespace prefs {
 
+inline constexpr char kHeliumPrefPrefix[] = "helium.";
+
 inline constexpr char kHeliumServicesEnabled[] =
     "helium.services.enabled";
 
 inline constexpr char kHeliumServicesOrigin[] =
     "helium.services.origin_override";
 
+inline constexpr char kHeliumServicesConsented[] =
+    "helium.services.user_consented";
+
+inline constexpr char kHeliumDidOnboarding[] =
+    "helium.completed_onboarding";
+
 }  // namespace prefs
 
 #endif  // COMPONENTS_HELIUM_SERVICES_PREF_NAMES_H_
--- a/chrome/browser/ui/browser_ui_prefs.cc
+++ b/chrome/browser/ui/browser_ui_prefs.cc
@@ -173,6 +173,8 @@ void RegisterBrowserUserPrefs(user_prefs
   {
     registry->RegisterBooleanPref(prefs::kHeliumServicesEnabled, true);
     registry->RegisterStringPref(prefs::kHeliumServicesOrigin, "");
+    registry->RegisterBooleanPref(prefs::kHeliumDidOnboarding, false);
+    registry->RegisterBooleanPref(prefs::kHeliumServicesConsented, false);
   }
 
   registry->RegisterBooleanPref(
--- a/chrome/browser/ui/startup/startup_browser_creator_impl.cc
+++ b/chrome/browser/ui/startup/startup_browser_creator_impl.cc
@@ -49,6 +49,8 @@
 #include "chrome/browser/ui/webui/whats_new/whats_new_util.h"
 #include "chrome/common/chrome_switches.h"
 #include "chrome/common/pref_names.h"
+#include "chrome/common/webui_url_constants.h"
+#include "components/helium_services/pref_names.h"
 #include "components/custom_handlers/protocol_handler_registry.h"
 #include "components/prefs/pref_service.h"
 #include "components/privacy_sandbox/privacy_sandbox_features.h"
@@ -457,6 +459,13 @@ StartupBrowserCreatorImpl::DetermineStar
   LaunchResult launch_result =
       tabs.empty() ? LaunchResult::kNormally : LaunchResult::kWithGivenUrls;
 
+  if (!is_incognito_or_guest) {
+    if (!profile_->GetPrefs()->GetBoolean(prefs::kHeliumDidOnboarding)) {
+      UrlsToTabs({ GURL(chrome::kHeliumSetupURL) }, &tabs);
+      return { tabs, LaunchResult::kWithGivenUrls };
+    }
+  }
+
   if (whats_new_enabled && (launch_result == LaunchResult::kWithGivenUrls ||
                             is_incognito_or_guest || is_post_crash_launch)) {
     whats_new::LogStartupType(whats_new::StartupType::kIneligible);
--- a/tools/gritsettings/resource_ids.spec
+++ b/tools/gritsettings/resource_ids.spec
@@ -1103,6 +1103,10 @@
    "META": {"sizes": {"includes": [30],}},
     "includes": [7480],
   },
+  "<(SHARED_INTERMEDIATE_DIR)/components/helium_onboarding/resources.grd": {
+   "META": {"sizes": {"includes": [30],}},
+    "includes": [7510],
+  },
   # END components/ section.
 
   # START ios/ section.
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -8407,6 +8407,7 @@ static_library("browser_generated_files"
     "//chrome/browser/ui/webui/user_education_internals:mojo_bindings",
     "//chrome/browser/v8_compile_hints/proto",
     "//chrome/browser/web_applications/mojom:mojom_web_apps_enum",
+    "//components/helium_onboarding:generated_resources",
   ]
   if (is_android) {
     public_deps += [
--- a/chrome/chrome_paks.gni
+++ b/chrome/chrome_paks.gni
@@ -435,11 +435,13 @@ template("chrome_extra_paks") {
     if (!is_android && !is_chromeos_ash) {
       sources += [
         "$root_gen_dir/chrome/intro_resources.pak",
+        "$root_gen_dir/components/helium_onboarding/resources/helium_onboarding_generated.pak",
         "$root_gen_dir/chrome/profile_picker_resources.pak",
       ]
       deps += [
         "//chrome/browser/resources/intro:resources",
         "//chrome/browser/resources/signin/profile_picker:resources",
+        "//components/helium_onboarding:generated_resources",
       ]
     }
 
--- a/chrome/common/webui_url_constants.cc
+++ b/chrome/common/webui_url_constants.cc
@@ -116,6 +116,7 @@ base::span<const base::cstring_view> Chr
       kChromeUIPrefsInternalsHost,
       kChromeUIProfileInternalsHost,
       content::kChromeUIQuotaInternalsHost,
+      kHeliumSetupHost,
       kChromeUISignInInternalsHost,
       kChromeUISiteEngagementHost,
 #if !BUILDFLAG(IS_ANDROID)
--- a/chrome/common/webui_url_constants.h
+++ b/chrome/common/webui_url_constants.h
@@ -556,6 +556,8 @@ inline constexpr char kChromeUIProfilePi
 inline constexpr char kChromeUIProfilePickerStartupQuery[] = "startup";
 inline constexpr char kChromeUIProfilePickerGlicQuery[] = "glic";
 inline constexpr char kChromeUIProfilePickerUrl[] = "chrome://profile-picker/";
+inline constexpr char kHeliumSetupHost[] = "setup";
+inline constexpr char kHeliumSetupURL[] = "chrome://setup";
 #endif
 
 #if ((BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)) && \
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -230,6 +230,10 @@ static_library("ui") {
     "webui/net_internals/net_internals_ui.h",
     "webui/ntp_tiles_internals_ui.cc",
     "webui/ntp_tiles_internals_ui.h",
+    "webui/onboarding/onboarding_handler.cc",
+    "webui/onboarding/onboarding_handler.h",
+    "webui/onboarding/onboarding_page_ui.cc",
+    "webui/onboarding/onboarding_page_ui.h",
     "webui/omnibox/omnibox_page_handler.cc",
     "webui/omnibox/omnibox_page_handler.h",
     "webui/omnibox/omnibox_ui.cc",
--- a/chrome/browser/ui/webui/chrome_web_ui_configs.cc
+++ b/chrome/browser/ui/webui/chrome_web_ui_configs.cc
@@ -34,6 +34,7 @@
 #include "chrome/browser/ui/webui/net_export_ui.h"
 #include "chrome/browser/ui/webui/net_internals/net_internals_ui.h"
 #include "chrome/browser/ui/webui/ntp_tiles_internals_ui.h"
+#include "chrome/browser/ui/webui/onboarding/onboarding_page_ui.h"
 #include "chrome/browser/ui/webui/omnibox/omnibox_ui.h"
 #include "chrome/browser/ui/webui/policy/policy_ui.h"
 #include "chrome/browser/ui/webui/predictors/predictors_ui.h"
@@ -383,6 +384,7 @@ void RegisterChromeWebUIConfigs() {
 #if !BUILDFLAG(IS_CHROMEOS) && !BUILDFLAG(IS_ANDROID)
   map.AddWebUIConfig(std::make_unique<ManagedUserProfileNoticeUIConfig>());
   map.AddWebUIConfig(std::make_unique<IntroUIConfig>());
+  map.AddWebUIConfig(std::make_unique<HeliumOnboardingPageConfig>());
   map.AddWebUIConfig(std::make_unique<ProfileCustomizationUIConfig>());
   map.AddWebUIConfig(std::make_unique<ProfilePickerUIConfig>());
   map.AddWebUIConfig(std::make_unique<SigninErrorUIConfig>());
--- /dev/null
+++ b/chrome/browser/ui/webui/onboarding/onboarding_page_ui.cc
@@ -0,0 +1,33 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#include "chrome/browser/ui/webui/onboarding/onboarding_page_ui.h"
+
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ui/webui/onboarding/onboarding_handler.h"
+#include "chrome/common/webui_url_constants.h"
+#include "content/public/browser/web_ui_controller.h"
+#include "content/public/browser/web_ui_data_source.h"
+#include "components/helium_onboarding/resources/grit/helium_onboarding_generated.h"
+#include "components/helium_onboarding/resources/grit/helium_onboarding_generated_map.h"
+#include "ui/webui/webui_util.h"
+
+HeliumOnboardingPage::HeliumOnboardingPage(content::WebUI* web_ui) : WebUIController(web_ui) {
+    content::WebUIDataSource* source =
+        content::WebUIDataSource::CreateAndAdd(
+            Profile::FromWebUI(web_ui), chrome::kHeliumSetupHost
+        );
+
+    webui::SetupWebUIDataSource(
+        source, kHeliumOnboardingGenerated,
+        IDR_HELIUM_ONBOARDING_INDEX_HTML);
+
+    source->UseStringsJs();
+    source->DisableTrustedTypesCSP();
+
+    web_ui->AddMessageHandler(
+        std::make_unique<OnboardingMessageHandler>(Profile::FromWebUI(web_ui)));
+}
+
+HeliumOnboardingPage::~HeliumOnboardingPage() = default;
--- /dev/null
+++ b/chrome/browser/ui/webui/onboarding/onboarding_page_ui.h
@@ -0,0 +1,31 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_PAGE_H_
+#define CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_PAGE_H_
+
+#include "chrome/common/webui_url_constants.h"
+#include "content/public/browser/webui_config.h"
+#include "content/public/browser/web_ui_controller.h"
+
+class HeliumOnboardingPage;
+
+class HeliumOnboardingPageConfig
+    : public content::DefaultWebUIConfig<HeliumOnboardingPage> {
+ public:
+  HeliumOnboardingPageConfig()
+      : DefaultWebUIConfig(content::kChromeUIScheme,
+                           chrome::kHeliumSetupHost) {}
+};
+
+class HeliumOnboardingPage : public content::WebUIController {
+public:
+    explicit HeliumOnboardingPage(content::WebUI* web_ui);
+
+    HeliumOnboardingPage(const HeliumOnboardingPage&) = delete;
+    HeliumOnboardingPage& operator=(const HeliumOnboardingPage&) = delete;
+    ~HeliumOnboardingPage() override;
+};
+
+#endif // CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_PAGE_H_
--- /dev/null
+++ b/chrome/browser/ui/webui/onboarding/onboarding_handler.cc
@@ -0,0 +1,82 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#include "chrome/browser/ui/webui/onboarding/onboarding_handler.h"
+
+#include "base/values.h"
+#include "components/prefs/pref_service.h"
+#include "components/helium_services/pref_names.h"
+
+OnboardingMessageHandler::OnboardingMessageHandler(Profile* profile)
+    : profile_(profile), pref_service_(profile->GetPrefs()) {}
+
+OnboardingMessageHandler::~OnboardingMessageHandler() = default;
+
+void OnboardingMessageHandler::RegisterMessages() {
+    web_ui()->RegisterMessageCallback(
+        "getPrefs",
+        base::BindRepeating(&OnboardingMessageHandler::HandleGetPreferences,
+                            base::Unretained(this)));
+
+    web_ui()->RegisterMessageCallback(
+        "setPref",
+        base::BindRepeating(&OnboardingMessageHandler::HandleSetPreference,
+                            base::Unretained(this)));
+}
+
+void OnboardingMessageHandler::HandleGetPreferences(const base::Value::List& args) {
+    CHECK_EQ(1U, args.size());
+
+    const auto& callback_id = args[0].GetString();
+    std::vector<PrefService::PreferenceValueAndStore> values =
+        pref_service_->GetPreferencesValueAndStore();
+    base::Value::Dict output;
+
+    for (const auto& [name, value, _] : values) {
+        if (!base::StartsWith(name, prefs::kHeliumPrefPrefix,
+                base::CompareCase::SENSITIVE)) {
+            continue;
+        }
+
+        output.Set(
+            name.substr(sizeof(prefs::kHeliumPrefPrefix) - 1),
+            value.Clone()
+        );
+    }
+
+    AllowJavascript();
+    ResolveJavascriptCallback(
+        base::Value(callback_id), base::Value(std::move(output)));
+}
+
+void OnboardingMessageHandler::HandleSetPreference(const base::Value::List& args) {
+    if (args.size() == 0) {
+        return;
+    }
+
+    AllowJavascript();
+
+    const auto& callback_id = args[0].GetString();
+    if (args.size() != 3) {
+        return RejectJavascriptCallback(callback_id, "invalid arguments");
+    }
+
+    if (!args[1].is_string()) {
+        return RejectJavascriptCallback(callback_id, "pref is not a string");
+    }
+
+    const auto& pref_name = prefs::kHeliumPrefPrefix + args[1].GetString();
+    auto* pref = pref_service_->FindPreference(pref_name);
+    if (!pref) {
+        return RejectJavascriptCallback(callback_id, pref_name + " does not exist");
+    }
+
+    if (args[2].type() != pref->GetType()) {
+        return RejectJavascriptCallback(callback_id, "invalid value type");
+    }
+
+    pref_service_->Set(pref_name, args[2].Clone());
+
+    ResolveJavascriptCallback(callback_id, {});
+}
--- /dev/null
+++ b/chrome/browser/ui/webui/onboarding/onboarding_handler.h
@@ -0,0 +1,37 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_HANDLER_H_
+#define CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_HANDLER_H_
+
+#include <optional>
+#include <string>
+
+#include "base/memory/raw_ptr.h"
+#include "base/memory/weak_ptr.h"
+#include "base/values.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/prefs/pref_service.h"
+#include "content/public/browser/web_ui_message_handler.h"
+
+class OnboardingMessageHandler : public content::WebUIMessageHandler {
+ public:
+  explicit OnboardingMessageHandler(Profile* profile);
+  OnboardingMessageHandler(const OnboardingMessageHandler&) = delete;
+  OnboardingMessageHandler& operator=(const OnboardingMessageHandler&) = delete;
+  ~OnboardingMessageHandler() override;
+
+  void RegisterMessages() override;
+
+ private:
+  void HandleGetPreferences(const base::Value::List& args);
+  void HandleSetPreference(const base::Value::List& args);
+  void HandleCompletedOnboarding(const base::Value::List& args);
+
+  raw_ptr<Profile> profile_ = nullptr;
+  raw_ptr<PrefService> pref_service_ = nullptr;
+  base::WeakPtrFactory<OnboardingMessageHandler> weak_ptr_factory_{this};
+};
+
+#endif // CHROME_BROWSER_UI_WEBUI_ONBOARDING_ONBOARDING_HANDLER_H_
--- a/components/helium_services/helium_services_helpers.cc
+++ b/components/helium_services/helium_services_helpers.cc
@@ -53,12 +53,18 @@ GURL GetDummyURL() {
 }
 
 bool ShouldAccessServices(const PrefService& prefs) {
-    return prefs.GetBoolean(prefs::kHeliumServicesEnabled);
+    // onboarding was completed without touching kHeliumServicesEnabled,
+    // OR the user has explicitly enabled kHeliumServicesEnabled somewhere
+    // (either via onboarding, or user settings)
+    return prefs.GetBoolean(prefs::kHeliumServicesEnabled) &&
+           (prefs.GetBoolean(prefs::kHeliumServicesConsented)
+           || prefs.HasPrefPath(prefs::kHeliumServicesEnabled));
 }
 
 void ConfigurePrefChangeRegistrarFor(std::string_view pref_name,
     PrefChangeRegistrar& registrar, const base::RepeatingClosure& observer) {
   registrar.Add(prefs::kHeliumServicesEnabled, observer);
+  registrar.Add(prefs::kHeliumServicesConsented, observer);
   registrar.Add(prefs::kHeliumServicesOrigin, observer);
   registrar.Add(pref_name, observer);
 }
--- a/chrome/browser/ui/browser_navigator.cc
+++ b/chrome/browser/ui/browser_navigator.cc
@@ -583,7 +583,8 @@ bool IsHostAllowedInIncognito(const GURL
          host != chrome::kChromeUIHistoryHost &&
          host != chrome::kChromeUIExtensionsHost &&
          host != chrome::kChromeUIBookmarksHost &&
-         host != password_manager::kChromeUIPasswordManagerHost;
+         host != password_manager::kChromeUIPasswordManagerHost &&
+         host != chrome::kHeliumSetupHost;
 }
 
 }  // namespace

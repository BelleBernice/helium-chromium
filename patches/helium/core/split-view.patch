--- a/chrome/browser/ui/ui_features.cc
+++ b/chrome/browser/ui/ui_features.cc
@@ -104,7 +104,7 @@ BASE_FEATURE(KScrimForTabModal,
              "ScrimForTabModal",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
-BASE_FEATURE(kSideBySide, "SideBySide", base::FEATURE_DISABLED_BY_DEFAULT);
+BASE_FEATURE(kSideBySide, "SideBySide", base::FEATURE_ENABLED_BY_DEFAULT);
 
 // The delay before showing the drop target for the side-by-side drag-and-drop
 // entrypoint.
--- a/chrome/browser/ui/views/frame/multi_contents_resize_area.cc
+++ b/chrome/browser/ui/views/frame/multi_contents_resize_area.cc
@@ -22,8 +22,8 @@
 namespace {
 const int kHandleCornerRadius = 2;
 const int kHandleHeight = 24;
-const int kHandlePadding = 6;
-const int kHandleWidth = 4;
+const int kHandlePadding = 4;
+const int kHandleWidth = 2;
 }  // namespace
 
 DEFINE_CLASS_ELEMENT_IDENTIFIER_VALUE(MultiContentsResizeHandle,
--- a/chrome/browser/ui/views/frame/multi_contents_view.h
+++ b/chrome/browser/ui/views/frame/multi_contents_view.h
@@ -23,7 +23,6 @@ class MultiContentsDropTargetView;
 class MultiContentsResizeArea;
 class MultiContentsViewDelegate;
 class MultiContentsViewDropTargetController;
-class MultiContentsViewMiniToolbar;
 
 namespace content {
 class WebContents;
@@ -57,7 +56,7 @@ class MultiContentsView : public views::
     double drop_target_width = 0;
   };
 
-  static constexpr int kSplitViewContentInset = 8;
+  static constexpr int kSplitViewContentInset = 3;
 
   MultiContentsView(BrowserView* browser_view,
                     std::unique_ptr<MultiContentsViewDelegate> delegate);
@@ -134,10 +133,6 @@ class MultiContentsView : public views::
     return contents_container_views_[1]->GetContentsView();
   }
 
-  MultiContentsViewMiniToolbar* mini_toolbar_for_testing(int index) const {
-    return contents_container_views_[index]->GetMiniToolbar();
-  }
-
  private:
   static constexpr int kMinWebContentsWidth = 200;
   static constexpr double kMinWebContentsWidthPercentage = 0.1;
--- a/chrome/browser/resources/tab_search/split_view/app.css
+++ b/chrome/browser/resources/tab_search/split_view/app.css
@@ -50,7 +50,7 @@ picture {
 
 .body {
   align-self: center;
-  color: var(--cr-primary-text-color);
+  color: var(--cr-secondary-text-color);
   font-size: 14px;
   font-weight: 400;
   line-height: 20px;
--- a/chrome/browser/ui/views/frame/multi_contents_view.cc
+++ b/chrome/browser/ui/views/frame/multi_contents_view.cc
@@ -18,7 +18,6 @@
 #include "chrome/browser/ui/views/frame/multi_contents_resize_area.h"
 #include "chrome/browser/ui/views/frame/multi_contents_view_delegate.h"
 #include "chrome/browser/ui/views/frame/multi_contents_view_drop_target_controller.h"
-#include "chrome/browser/ui/views/frame/multi_contents_view_mini_toolbar.h"
 #include "chrome/browser/ui/views/frame/scrim_view.h"
 #include "chrome/browser/ui/views/frame/top_container_background.h"
 #include "content/public/browser/web_contents.h"
--- a/chrome/browser/ui/views/frame/contents_container_view.cc
+++ b/chrome/browser/ui/views/frame/contents_container_view.cc
@@ -10,7 +10,6 @@
 #include "chrome/browser/ui/color/chrome_color_id.h"
 #include "chrome/browser/ui/views/frame/browser_view.h"
 #include "chrome/browser/ui/views/frame/contents_web_view.h"
-#include "chrome/browser/ui/views/frame/multi_contents_view_mini_toolbar.h"
 #include "chrome/browser/ui/views/frame/scrim_view.h"
 #include "ui/base/metadata/metadata_impl_macros.h"
 #include "ui/color/color_provider.h"
@@ -23,10 +22,10 @@
 
 namespace {
 
-constexpr int kContentCornerRadius = 6;
-constexpr int kContentOutlineCornerRadius = 8;
+constexpr gfx::RoundedCornersF kContentCornerRadius{8};
+constexpr int kContentOutlineCornerRadius = 9;
 constexpr int kContentOutlineThickness = 1;
-constexpr int kSplitViewContentPadding = 4;
+constexpr int kSplitViewContentPadding = 0;
 
 }  // namespace
 
@@ -36,8 +35,6 @@ ContentsContainerView::ContentsContainer
   contents_view_ = AddChildView(
       std::make_unique<ContentsWebView>(browser_view->GetProfile()));
   scrim_view_ = AddChildView(std::make_unique<ScrimView>(kColorSplitViewScrim));
-  mini_toolbar_ = AddChildView(std::make_unique<MultiContentsViewMiniToolbar>(
-      browser_view, contents_view_));
 }
 
 void ContentsContainerView::UpdateBorderAndOverlay(bool is_in_split,
@@ -47,8 +44,9 @@ void ContentsContainerView::UpdateBorder
   // split.
   if (!is_in_split) {
     SetBorder(nullptr);
-    contents_view_->layer()->SetRoundedCornerRadius(gfx::RoundedCornersF{0});
-    mini_toolbar_->SetVisible(false);
+    contents_view_->holder()->SetCornerRadii(gfx::RoundedCornersF{0});
+    contents_view_->SetBackgroundRadii(gfx::RoundedCornersF{0});
+    scrim_view_->SetRoundedCorners(gfx::RoundedCornersF{0});
     scrim_view_->SetVisible(false);
     return;
   }
@@ -64,11 +62,11 @@ void ContentsContainerView::UpdateBorder
       views::CreateRoundedRectBorder(kContentOutlineThickness,
                                      kContentOutlineCornerRadius, color),
       gfx::Insets(kSplitViewContentPadding)));
-  contents_view_->layer()->SetRoundedCornerRadius(
-      gfx::RoundedCornersF{kContentCornerRadius});
-  // Mini toolbar should only be visible for the inactive contents
-  // container view or both depending on configuration.
-  mini_toolbar_->UpdateState(is_active);
+
+  contents_view_->holder()->SetCornerRadii(kContentCornerRadius);
+  contents_view_->SetBackgroundRadii(kContentCornerRadius);
+  scrim_view_->SetRoundedCorners(kContentCornerRadius);
+
   // Scrim should only be allowed to show the scrim for inactive contents
   // container view.
   scrim_view_->SetVisible(!is_active && show_scrim);
@@ -94,20 +92,6 @@ views::ProposedLayout ContentsContainerV
   layouts.child_layouts.emplace_back(scrim_view_.get(),
                                      scrim_view_->GetVisible(), contents_rect);
 
-  // |mini_toolbar_| should be offset in the bottom right corner, overlapping
-  // the outline.
-  gfx::Size mini_toolbar_size = mini_toolbar_->GetPreferredSize(
-      views::SizeBounds(width - kContentOutlineCornerRadius, height));
-  const int offset_x =
-      width - mini_toolbar_size.width() + (kContentOutlineThickness / 2.0f);
-  const int offset_y =
-      height - mini_toolbar_size.height() + (kContentOutlineThickness / 2.0f);
-  const gfx::Rect mini_toolbar_rect =
-      gfx::Rect(offset_x, offset_y, mini_toolbar_size.width(),
-                mini_toolbar_size.height());
-  layouts.child_layouts.emplace_back(
-      mini_toolbar_.get(), mini_toolbar_->GetVisible(), mini_toolbar_rect);
-
   layouts.host_size = gfx::Size(width, height);
   return layouts;
 }
--- a/chrome/browser/ui/views/frame/contents_container_view.h
+++ b/chrome/browser/ui/views/frame/contents_container_view.h
@@ -11,7 +11,6 @@
 
 class BrowserView;
 class ContentsWebView;
-class MultiContentsViewMiniToolbar;
 class ScrimView;
 
 // ContentsContainerView is owned by MultiContentsView and holds the
@@ -25,7 +24,6 @@ class ContentsContainerView : public vie
   ~ContentsContainerView() override = default;
 
   ContentsWebView* GetContentsView() { return contents_view_; }
-  MultiContentsViewMiniToolbar* GetMiniToolbar() { return mini_toolbar_; }
   ScrimView* GetScrimView() { return scrim_view_; }
 
   void UpdateBorderAndOverlay(bool is_in_split,
@@ -39,7 +37,6 @@ class ContentsContainerView : public vie
 
   raw_ptr<ContentsWebView> contents_view_;
   raw_ptr<ScrimView> scrim_view_;
-  raw_ptr<MultiContentsViewMiniToolbar> mini_toolbar_;
 };
 
 #endif  // CHROME_BROWSER_UI_VIEWS_FRAME_CONTENTS_CONTAINER_VIEW_H_
--- a/ui/views/controls/native/native_view_host.cc
+++ b/ui/views/controls/native/native_view_host.cc
@@ -75,6 +75,9 @@ gfx::NativeViewAccessible NativeViewHost
 }
 
 bool NativeViewHost::SetCornerRadii(const gfx::RoundedCornersF& corner_radii) {
+  if (!native_wrapper_) {
+    return false;
+  }
   return native_wrapper_->SetCornerRadii(corner_radii);
 }
 

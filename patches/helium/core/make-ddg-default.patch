--- a/third_party/search_engines_data/resources/definitions/prepopulated_engines.json
+++ b/third_party/search_engines_data/resources/definitions/prepopulated_engines.json
@@ -179,29 +179,13 @@
     // *** *** *** *** WARNING *** *** *** ***
     // TODO(crbug.com/343792225): Identify a way to resolve this problem and implement
     // necessary changes.
-    "google": {
+    "break_stuff_google": {
       "name": "Google",
       "keyword": "google.com",
       "favicon_url": "https://www.google.com/images/branding/product/ico/googleg_alldp.ico",
-      "search_url": "{google:baseURL}search?q={searchTerms}&{google:RLZ}{google:originalQueryForSuggestion}{google:assistedQueryStats}{google:searchFieldtrialParameter}{google:language}{google:prefetchSource}{google:searchClient}{google:sourceId}{google:contextualSearchVersion}ie={inputEncoding}",
-      "suggest_url": "{google:baseSuggestURL}search?{google:searchFieldtrialParameter}client={google:suggestClient}&gs_ri={google:suggestRid}&xssi=t&q={searchTerms}&{google:inputType}{google:omniboxFocusType}{google:cursorPosition}{google:currentPageUrl}{google:pageClassification}{google:clientCacheTimeToLive}{google:searchVersion}{google:sessionToken}{google:prefetchQuery}sugkey={google:suggestAPIKeyParameter}",
-      "image_url": "{google:baseSearchByImageURL}upload",
-      "image_translate_url": "{google:baseSearchByImageURL}upload?filtertype=tr&{imageTranslateSourceLocale}{imageTranslateTargetLocale}",
-      "contextual_search_url": "{google:baseURL}_/contextualsearch?{google:contextualSearchVersion}{google:contextualSearchContextData}",
-      "image_url_post_params": "encoded_image={google:imageThumbnail},image_url={google:imageURL},sbisrc={google:imageSearchSource},original_width={google:imageOriginalWidth},original_height={google:imageOriginalHeight},processed_image_dimensions={google:processedImageDimensions}",
-      "image_translate_source_language_param_key": "sourcelang",
-      "image_translate_target_language_param_key": "targetlang",
-      "search_intent_params": ["si", "gs_ssp"],
-      "alternate_urls": [
-        "{google:baseURL}#q={searchTerms}",
-        "{google:baseURL}search#q={searchTerms}",
-        "{google:baseURL}webhp#q={searchTerms}",
-        "{google:baseURL}s#q={searchTerms}",
-        "{google:baseURL}s?q={searchTerms}"
-      ],
-      "type": "SEARCH_ENGINE_GOOGLE",
-      "preconnect_to_search_url" : "ALLOWED",
-      "prefetch_likely_navigations" : "ALLOWED",
+      "search_url": "https://www.google.com/search?q={searchTerms}",
+      "suggest_url": "https://www.google.com/complete/search?client=chrome&q={searchTerms}",
+      "type": "SEARCH_ENGINE_OTHER",
       "id": 1
     },
 
--- a/components/search_engines/template_url_prepopulate_data.cc
+++ b/components/search_engines/template_url_prepopulate_data.cc
@@ -296,7 +296,7 @@ void ClearPrepopulatedEnginesInPrefs(Pre
 std::unique_ptr<TemplateURLData> GetPrepopulatedFallbackSearch(
     PrefService& prefs,
     CountryId country_id) {
-  return FindPrepopulatedEngineInternal(prefs, country_id, google.id,
+  return FindPrepopulatedEngineInternal(prefs, country_id, duckduckgo.id,
                                         /*use_first_as_fallback=*/true);
 }
 
--- a/components/search_engines/search_engine_choice/generated_marketing_snippets.cc
+++ b/components/search_engines/search_engine_choice/generated_marketing_snippets.cc
@@ -24,9 +24,6 @@ int GetMarketingSnippetResourceId(const
   if (engine_keyword == TemplateURLPrepopulateData::ecosia.keyword) {
     return IDS_ECOSIA_SEARCH_DESCRIPTION;
   }
-  if (engine_keyword == TemplateURLPrepopulateData::google.keyword) {
-    return IDS_GOOGLE_SEARCH_DESCRIPTION;
-  }
   if (engine_keyword == TemplateURLPrepopulateData::lilo.keyword) {
     return IDS_LILO_SEARCH_DESCRIPTION;
   }
--- a/components/search_engines/search_engine_utils.cc
+++ b/components/search_engines/search_engine_utils.cc
@@ -35,7 +35,7 @@ SearchEngineType GetEngineType(const GUR
   // incoming URL's host is "[*.]google.<TLD>".
   if (google_util::IsGoogleDomainUrl(url, google_util::DISALLOW_SUBDOMAIN,
                                      google_util::ALLOW_NON_STANDARD_PORTS))
-    return TemplateURLPrepopulateData::google.type;
+    return SEARCH_ENGINE_OTHER;
 
   // Now check the rest of the prepopulate data.
   for (const auto* engine : TemplateURLPrepopulateData::kAllEngines) {
--- a/tools/search_engine_choice/generate_search_engine_icons.py
+++ b/tools/search_engine_choice/generate_search_engine_icons.py
@@ -18,6 +18,8 @@ def generate_icon_path_map(output_filena
         '\tbase::MakeFixedFlatMap<std::u16string_view, std::string_view>({\n')
 
     for engine_keyword in engine_keywords:
+      if engine_keyword == "google.com":
+          continue
       resource_name = search_engine_icons_utils.keyword_to_resource_name(
           engine_keyword)
       utils_file.write('\t\t{')
@@ -26,11 +28,7 @@ def generate_icon_path_map(output_filena
 
     # Add Google to the map
     utils_file.write('\t\t{u"google.com",\n')
-    utils_file.write('#if BUILDFLAG(GOOGLE_CHROME_BRANDING)\n')
     utils_file.write('\t\t "chrome://theme/IDR_GOOGLE_COM_PNG"\n')
-    utils_file.write('#else\n')
-    utils_file.write('\t\t "chrome://theme/IDR_DEFAULT_FAVICON"\n')
-    utils_file.write('#endif\n')
     utils_file.write('\t}});\n')
 
 
@@ -45,6 +43,8 @@ def generate_icon_resource_id_map(output
     utils_file.write('\tbase::MakeFixedFlatMap<std::u16string_view, int>({\n')
 
     for engine_keyword in engine_keywords:
+      if engine_keyword == "google.com":
+        continue
       resource_name = search_engine_icons_utils.keyword_to_resource_name(
           engine_keyword)
       utils_file.write('\t\t{')
@@ -53,11 +53,7 @@ def generate_icon_resource_id_map(output
 
     # Add Google to the map
     utils_file.write('\t\t{u"google.com",\n')
-    utils_file.write('#if BUILDFLAG(GOOGLE_CHROME_BRANDING)\n')
     utils_file.write('\t\t IDR_GOOGLE_COM_PNG\n')
-    utils_file.write('#else\n')
-    utils_file.write('\t\t IDR_DEFAULT_FAVICON\n')
-    utils_file.write('#endif\n')
     utils_file.write('\t}});\n\n')
 
 
--- a/third_party/search_engines_data/resources/definitions/regional_settings.json
+++ b/third_party/search_engines_data/resources/definitions/regional_settings.json
@@ -3,6 +3,17 @@
 // found in the LICENSE file.
 {
   "elements": {
+    "ZZ": {  // Default
+      "search_engines": [
+          "&duckduckgo",
+          "&ecosia",
+          "&bing",
+          "&break_stuff_google",
+          "&qwant"
+      ]
+    }
+  },
+  "elements_ignored": {
     "AE": {  // United Arab Emirates
       "search_engines": [
           "&google",
@@ -1335,7 +1346,8 @@
     "name": "kRegionalSettings",
     "export_items": false,
     "map_key_type": "country_codes::CountryId",
-    "map_aliases": {
+    "map_aliases": {},
+    "map_aliases_ignored": {
       "AD": "ES",  // Andorra
       "AF": "ZZ",  // Afghanistan
       "AG": "ZZ",  // Antigua and Barbuda

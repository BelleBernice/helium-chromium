--- a/extensions/common/extension_urls.cc
+++ b/extensions/common/extension_urls.cc
@@ -43,6 +43,8 @@ const char kChromeWebstoreBaseURL[] = "h
 const char kNewChromeWebstoreBaseURL[] = "https://chromewebstore.google.com/";
 const char kChromeWebstoreUpdateURL[] =
     "https://clients2.google.com/service/update2/crx";
+const char kHeliumProxyWebstoreUpdateURL[] =
+    "https://services.helium.computer/ext/webstore";
 
 const char kAppMenuUtmSource[] = "ext_app_menu";
 const char kExtensionsMenuUtmSource[] = "ext_extensions_menu";
@@ -100,13 +102,10 @@ base::AutoReset<const GURL*> SetItemSnip
 }
 
 GURL GetDefaultWebstoreUpdateUrl() {
-  return GURL(kChromeWebstoreUpdateURL);
+  return GURL(kHeliumProxyWebstoreUpdateURL);
 }
 
 GURL GetWebstoreUpdateUrl() {
-  extensions::ExtensionsClient* client = extensions::ExtensionsClient::Get();
-  if (client)
-    return client->GetWebstoreUpdateURL();
   return GetDefaultWebstoreUpdateUrl();
 }
 
--- a/components/policy/core/common/policy_loader_common.cc
+++ b/components/policy/core/common/policy_loader_common.cc
@@ -24,9 +24,9 @@ namespace {
 // implementation. And the Chrome one can be moved to c/b/policy.
 // From extensions/common/extension_urls.cc
 const char kChromeWebstoreUpdateURL[] =
-    "https://clients2.google.com/service/update2/crx";
+    "https://services.helium.computer/ext/webstore";
 const char16_t kChromeWebstoreUpdateURL16[] =
-    u"https://clients2.google.com/service/update2/crx";
+    u"https://services.helium.computer/ext/webstore";
 
 // From chrome/browser/extensions/extension_management_constants.cc
 const char kWildcard[] = "*";
--- a/extensions/common/extension_urls.h
+++ b/extensions/common/extension_urls.h
@@ -35,6 +35,7 @@ namespace extension_urls {
 extern const char kChromeWebstoreBaseURL[];
 extern const char kChromeWebstoreUpdateURL[];
 extern const char kNewChromeWebstoreBaseURL[];
+extern const char kHeliumProxyWebstoreUpdateURL[];
 
 // Various utm attribution sources for web store URLs.
 // From the sub-menu item in the extension menu inside the 3-dot menu.
--- a/extensions/common/manifest_url_handlers.cc
+++ b/extensions/common/manifest_url_handlers.cc
@@ -17,6 +17,7 @@
 #include "extensions/common/manifest.h"
 #include "extensions/common/manifest_constants.h"
 #include "extensions/common/manifest_handlers/shared_module_info.h"
+#include "extensions/common/manifest_url_patcher.h"
 #include "extensions/strings/grit/extensions_strings.h"
 #include "ui/base/l10n/l10n_util.h"
 
@@ -61,8 +62,14 @@ GURL ManifestURL::GetWebStoreURL(const E
 }
 
 // static
-const GURL& ManifestURL::GetUpdateURL(const Extension* extension) {
-  return Get(extension, keys::kUpdateURL);
+GURL ManifestURL::GetUpdateURL(const Extension* extension) {
+  const GURL& original_url = Get(extension, keys::kUpdateURL);
+
+  if (extension_urls::CanPatchUpdateUrl(original_url)) {
+    return extension_urls::PatchUpdateUrl(original_url);
+  }
+
+  return GURL(original_url);
 }
 
 // static
--- /dev/null
+++ b/extensions/common/manifest_url_patcher.cc
@@ -0,0 +1,37 @@
+// Copyright 2025 The Helium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef EXTENSIONS_COMMON_MANIFEST_URL_PATCHER_H_
+#define EXTENSIONS_COMMON_MANIFEST_URL_PATCHER_H_
+
+#include "extensions/common/extension_urls.h"
+#include "url/gurl.h"
+#include "base/notreached.h"
+
+namespace extension_urls {
+
+const char kChromeWebstoreCleanUpdateURL[] =
+    "https://clients2.google.com/service/update2/crx";
+
+GURL GetOriginalWebstoreUpdateUrl() {
+    return GURL(kChromeWebstoreCleanUpdateURL);
+}
+
+bool CanPatchUpdateUrl(const GURL& url) {
+    GURL chrome_webstore = GetOriginalWebstoreUpdateUrl();
+    return chrome_webstore.host_piece() == url.host_piece();
+}
+
+GURL PatchUpdateUrl(const GURL& url) {
+    GURL chrome_webstore = GetOriginalWebstoreUpdateUrl();
+    if (chrome_webstore.host_piece() == url.host_piece()) {
+        return GetDefaultWebstoreUpdateUrl();
+    }
+
+    NOTREACHED();
+}
+
+}  // namespace extension_urls
+
+#endif  // EXTENSIONS_COMMON_MANIFEST_URL_PATCHER_H_
--- /dev/null
+++ b/extensions/common/manifest_url_patcher.h
@@ -0,0 +1,18 @@
+// Copyright 2025 The Helium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef EXTENSIONS_COMMON_MANIFEST_URL_PATCHER_H_
+#define EXTENSIONS_COMMON_MANIFEST_URL_PATCHER_H_
+
+namespace extension_urls {
+
+extern const char kChromeWebstoreCleanUpdateURL[];
+
+GURL GetOriginalWebstoreUpdateUrl();
+bool CanPatchUpdateUrl(const GURL& url);
+GURL PatchUpdateUrl(const GURL& url);
+
+}  // namespace extension_urls
+
+#endif  // EXTENSIONS_COMMON_MANIFEST_URL_PATCHER_H_
--- a/extensions/common/BUILD.gn
+++ b/extensions/common/BUILD.gn
@@ -428,6 +428,8 @@ static_library("common") {
     "manifest_handlers/webview_info.h",
     "manifest_url_handlers.cc",
     "manifest_url_handlers.h",
+    "manifest_url_patcher.cc",
+    "manifest_url_patcher.h",
     "message_bundle.cc",
     "message_bundle.h",
     "permissions/api_permission.cc",
--- a/extensions/common/manifest_url_handlers.h
+++ b/extensions/common/manifest_url_handlers.h
@@ -43,7 +43,7 @@ struct ManifestURL : public Extension::M
   static GURL GetWebStoreURL(const Extension* extension);
 
   // Returns the Update URL for this extension.
-  static const GURL& GetUpdateURL(const Extension* extension);
+  static GURL GetUpdateURL(const Extension* extension);
 
   // Returns true if this extension's update URL is the extension gallery.
   static bool UpdatesFromGallery(const Extension* extension);
--- a/components/component_updater/component_updater_url_constants.cc
+++ b/components/component_updater/component_updater_url_constants.cc
@@ -15,9 +15,9 @@ namespace component_updater {
 // The value of |kDefaultUrlSource| can be overridden with
 // --component-updater=url-source=someurl.
 const char kUpdaterJSONDefaultUrl[] =
-    "https://update.googleapis.com/service/update2/json";
+    "https://services.helium.computer/ext/webstore/update";
 
 const char kUpdaterJSONFallbackUrl[] =
-    "http://update.googleapis.com/service/update2/json";
+    "trk:http://update.googleapis.com/service/update2/json";
 
 }  // namespace component_updater
--- a/chrome/browser/extensions/updater/chrome_extension_downloader_factory.cc
+++ b/chrome/browser/extensions/updater/chrome_extension_downloader_factory.cc
@@ -50,7 +50,7 @@ ChromeExtensionDownloaderFactory::Create
     manifest_query_params += "&testrequest=1";
   }
   downloader->set_manifest_query_params(manifest_query_params);
-  downloader->set_ping_enabled_domain("google.com");
+  downloader->set_ping_enabled_domain("helium.computer");
   return downloader;
 }
 
--- a/chrome/browser/extensions/policy_handlers.cc
+++ b/chrome/browser/extensions/policy_handlers.cc
@@ -154,7 +154,7 @@ bool ExtensionInstallForceListPolicyHand
     size_t pos = entry_string.find(';');
     if (pos == std::string::npos) {
       extension_id = entry_string;
-      update_url = extension_urls::kChromeWebstoreUpdateURL;
+      update_url = extension_urls::kHeliumProxyWebstoreUpdateURL;
     } else {
       extension_id = entry_string.substr(0, pos);
       update_url = entry_string.substr(pos + 1);
--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -339,6 +339,8 @@ const PrefsUtil::TypedPrefMap& PrefsUtil
   // Helium services page
   (*s_allowlist)[::prefs::kHeliumServicesEnabled] =
       settings_api::PrefType::kBoolean;
+  (*s_allowlist)[::prefs::kHeliumExtProxyEnabled] =
+      settings_api::PrefType::kBoolean;
   (*s_allowlist)[::prefs::kHeliumServicesOrigin] =
       settings_api::PrefType::kString;
 
--- a/chrome/browser/ui/browser_ui_prefs.cc
+++ b/chrome/browser/ui/browser_ui_prefs.cc
@@ -172,6 +172,7 @@ void RegisterBrowserUserPrefs(user_prefs
 
   {
     registry->RegisterBooleanPref(prefs::kHeliumServicesEnabled, false);
+    registry->RegisterBooleanPref(prefs::kHeliumExtProxyEnabled, false);
     registry->RegisterStringPref(prefs::kHeliumServicesOrigin, "");
   }
 
--- a/chrome/browser/resources/settings/privacy_page/services_page.html
+++ b/chrome/browser/resources/settings/privacy_page/services_page.html
@@ -12,6 +12,11 @@
     </settings-toggle-button>
     <div class="cr-col">
         <cr-collapse id="servicesCollapse" opened="[[prefs.helium.services.enabled.value]]">
+            <settings-toggle-button id="extProxyToggleButton"
+                pref="{{prefs.helium.services.ext_proxy}}"
+                label="$i18n{heliumExtProxyToggle}"
+                sub-label="$i18n{heliumExtProxyToggleDescription}">
+            </settings-toggle-button>
         </cr-collapse>
     </div>
 </div>
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -1842,6 +1842,10 @@ void AddPrivacyStrings(content::WebUIDat
       {"heliumServicesToggle", IDS_SETTINGS_HELIUM_SERVICES_TOGGLE},
       {"heliumServicesToggleDescription",
         IDS_SETTINGS_HELIUM_SERVICES_TOGGLE_DESCRIPTION},
+      {"heliumExtProxyToggle",
+        IDS_SETTINGS_HELIUM_SERVICES_EXT_PROXY_TOGGLE},
+      {"heliumExtProxyToggleDescription",
+        IDS_SETTINGS_HELIUM_SERVICES_EXT_PROXY_TOGGLE_DESCRIPTION},
       {"heliumOriginOverride", IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE},
       {"heliumOriginOverrideDescription",
         IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE_DESCRIPTION},
--- a/chrome/app/settings_strings.grdp
+++ b/chrome/app/settings_strings.grdp
@@ -2082,6 +2082,12 @@
   <message name="IDS_SETTINGS_HELIUM_SERVICES_TOGGLE_DESCRIPTION" desc="Description of the toggle for enabling/disabling of all Helium services">
     When enabled, Helium can connect to services for providing additional functionality, such as native bangs or extension downloads.
   </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_EXT_PROXY_TOGGLE" desc="Toggle for enabling/disabling of downloading and proxying extensions">
+    Allow proxying extension downloads and updates
+  </message>
+  <message name="IDS_SETTINGS_HELIUM_SERVICES_EXT_PROXY_TOGGLE_DESCRIPTION" desc="Description of the toggle for enabling/disabling of downloading and proxying extensions">
+    When enabled, Helium will handle downloading and updating extensions from webstores while preserving your privacy.
+  </message>
   <message name="IDS_SETTINGS_HELIUM_SERVICES_OVERRIDE" desc="Text input for overriding the Helium services server">
     Use your own helium-services instance
   </message>
--- a/components/helium_services/pref_names.h
+++ b/components/helium_services/pref_names.h
@@ -13,6 +13,9 @@ inline constexpr char kHeliumServicesEna
 inline constexpr char kHeliumServicesOrigin[] =
     "helium.services.origin_override";
 
+inline constexpr char kHeliumExtProxyEnabled[] =
+    "helium.services.ext_proxy";
+
 }  // namespace prefs
 
 #endif  // COMPONENTS_HELIUM_SERVICES_PREF_NAMES_H_
--- a/components/helium_services/helium_services_helpers.cc
+++ b/components/helium_services/helium_services_helpers.cc
@@ -55,6 +55,19 @@ bool ShouldAccessServices(const PrefServ
     return prefs.GetBoolean(prefs::kHeliumServicesEnabled);
 }
 
+bool ShouldAccessExtensionService(const PrefService& prefs) {
+    return ShouldAccessServices(prefs) &&
+            prefs.GetBoolean(prefs::kHeliumExtProxyEnabled);
+}
+
+GURL GetExtensionUpdateURL(const PrefService& prefs) {
+    if (!ShouldAccessExtensionService(prefs)) {
+        return GetDummyURL();
+    }
+
+    return GetServicesBaseURL(prefs).Resolve("/ext");
+}
+
 void ConfigurePrefChangeRegistrarFor(std::string_view pref_name,
     PrefChangeRegistrar& registrar, const base::RepeatingClosure& observer) {
   registrar.Add(prefs::kHeliumServicesEnabled, observer);
--- a/components/helium_services/helium_services_helpers.h
+++ b/components/helium_services/helium_services_helpers.h
@@ -20,6 +20,7 @@ const char kHeliumDummyOrigin[] =
 
 COMPONENT_EXPORT(HELIUM) GURL GetServicesBaseURL(const PrefService& prefs);
 COMPONENT_EXPORT(HELIUM) GURL GetDummyURL();
+COMPONENT_EXPORT(HELIUM) GURL GetExtensionUpdateURL(const PrefService& prefs);
 COMPONENT_EXPORT(HELIUM) std::optional<GURL> GetValidUserOverridenURL(std::string_view user_url_);
 COMPONENT_EXPORT(HELIUM) void ConfigurePrefChangeRegistrarFor(std::string_view pref_name,
                             PrefChangeRegistrar& registrar, const base::RepeatingClosure& observer);

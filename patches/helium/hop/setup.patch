--- a/chrome/browser/policy/chrome_browser_policy_connector.cc
+++ b/chrome/browser/policy/chrome_browser_policy_connector.cc
@@ -32,6 +32,7 @@
 #include "components/policy/core/common/cloud/user_cloud_policy_manager.h"
 #include "components/policy/core/common/command_line_policy_provider.h"
 #include "components/policy/core/common/configuration_policy_provider.h"
+#include "components/policy/core/common/helium_opinionated_policy_provider.h"
 #include "components/policy/core/common/local_test_policy_provider.h"
 #include "components/policy/core/common/policy_logger.h"
 #include "components/policy/core/common/policy_map.h"
@@ -286,6 +287,9 @@ void ChromeBrowserPolicyConnector::SetDe
 std::vector<std::unique_ptr<policy::ConfigurationPolicyProvider>>
 ChromeBrowserPolicyConnector::CreatePolicyProviders() {
   auto providers = BrowserPolicyConnector::CreatePolicyProviders();
+
+  providers.insert(providers.begin(), std::make_unique<HopProvider>());
+
   std::unique_ptr<ConfigurationPolicyProvider> platform_provider =
       CreatePlatformProvider();
   if (platform_provider) {
--- a/components/policy/core/common/BUILD.gn
+++ b/components/policy/core/common/BUILD.gn
@@ -150,6 +150,8 @@ source_set("internal") {
     "external_data_manager.h",
     "features.cc",
     "features.h",
+    "helium_opinionated_policy_provider.cc",
+    "helium_opinionated_policy_provider.h",
     "json_schema_constants.cc",
     "json_schema_constants.h",
     "local_test_policy_loader.cc",
--- /dev/null
+++ b/components/policy/core/common/helium_opinionated_policy_provider.cc
@@ -0,0 +1,28 @@
+// Copyright 2025 The Helium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "components/policy/core/common/helium_opinionated_policy_provider.h"
+
+#include <memory>
+#include <utility>
+
+#include "base/memory/ptr_util.h"
+#include "build/build_config.h"
+#include "components/policy/core/common/policy_bundle.h"
+#include "components/policy/core/common/policy_types.h"
+#include "components/policy/policy_constants.h"
+
+namespace policy {
+void Set(PolicyMap& map, const std::string& name, PolicyLevel level, base::Value value) {
+  map.Set(name, level, POLICY_SCOPE_MACHINE, POLICY_SOURCE_HOP, std::move(value), nullptr);
+}
+
+void HopProvider::RefreshPolicies(PolicyFetchReason reason) {
+  PolicyBundle bundle;
+  PolicyMap& policy_map = bundle.Get(PolicyNamespace(POLICY_DOMAIN_CHROME, std::string()));
+
+  UpdatePolicy(std::move(bundle));
+}
+
+}  // namespace policy
--- /dev/null
+++ b/components/policy/core/common/helium_opinionated_policy_provider.h
@@ -0,0 +1,25 @@
+// Copyright 2025 The Helium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef COMPONENTS_POLICY_CORE_COMMON_HELIUM_OPINIONATED_POLICY_PROVIDER_H_
+#define COMPONENTS_POLICY_CORE_COMMON_HELIUM_OPINIONATED_POLICY_PROVIDER_H_
+
+#include "components/policy/core/common/configuration_policy_provider.h"
+#include "components/policy/policy_export.h"
+
+namespace policy {
+
+class POLICY_EXPORT HopProvider
+    : public ConfigurationPolicyProvider {
+ public:
+ HopProvider() = default;
+ HopProvider(const HopProvider&) = delete;
+ HopProvider& operator=(const HopProvider&) = delete;
+
+  void RefreshPolicies(PolicyFetchReason reason) override;
+};
+
+}  // namespace policy
+
+#endif  // COMPONENTS_POLICY_CORE_COMMON_HELIUM_OPINIONATED_POLICY_PROVIDER_H_
--- a/components/policy/core/common/policy_statistics_collector.cc
+++ b/components/policy/core/common/policy_statistics_collector.cc
@@ -50,6 +50,7 @@ SimplePolicySource SimplifyPolicySource(
     case POLICY_SOURCE_CLOUD:
     case POLICY_SOURCE_CLOUD_FROM_ASH:
       return kCloud;
+    case POLICY_SOURCE_HOP:
     case POLICY_SOURCE_PLATFORM:
     case POLICY_SOURCE_ACTIVE_DIRECTORY:
       // Adjust for enrollment policies which can never be set from cloud.
--- a/components/policy/core/common/policy_types.h
+++ b/components/policy/core/common/policy_types.h
@@ -73,6 +73,9 @@ enum PolicySource {
   // policy. This source should be kept as highest priority source.
   POLICY_SOURCE_RESTRICTED_MANAGED_GUEST_SESSION_OVERRIDE,
 
+  // Helium opinionated policies
+  POLICY_SOURCE_HOP,
+
   // Number of source types. Has to be the last element.
   POLICY_SOURCE_COUNT
 };
@@ -111,6 +114,10 @@ enum PolicyPriorityBrowser {
   // raised above that of platform and cloud machine policies.
   POLICY_PRIORITY_BROWSER_CLOUD_USER_DOUBLE_RAISED,
 
+  // The policy is configured as a HOP, which takes precedence over
+  // everything else.
+  POLICY_PRIORITY_BROWSER_HOP,
+
   // The policy coming from multiple sources and its value has been merged.
   POLICY_PRIORITY_BROWSER_MERGED,
 };
--- a/components/enterprise/browser/reporting/policy_info.cc
+++ b/components/enterprise/browser/reporting/policy_info.cc
@@ -49,6 +49,7 @@ em::Policy_PolicyScope GetScope(const ba
 em::Policy_PolicySource GetSource(const base::Value& policy) {
   switch (
       static_cast<policy::PolicySource>(*policy.GetDict().FindInt("source"))) {
+    case policy::POLICY_SOURCE_HOP:
     case policy::POLICY_SOURCE_ENTERPRISE_DEFAULT:
       return em::Policy_PolicySource_SOURCE_ENTERPRISE_DEFAULT;
     case policy::POLICY_SOURCE_COMMAND_LINE:
--- a/components/policy/core/common/policy_map.cc
+++ b/components/policy/core/common/policy_map.cc
@@ -74,6 +74,8 @@ PolicyPriorityBrowser GetPriority(
       return POLICY_PRIORITY_BROWSER_ENTERPRISE_DEFAULT;
     case POLICY_SOURCE_COMMAND_LINE:
       return POLICY_PRIORITY_BROWSER_COMMAND_LINE;
+    case POLICY_SOURCE_HOP:
+      return POLICY_PRIORITY_BROWSER_HOP;
     case POLICY_SOURCE_CLOUD:
       if (scope == POLICY_SCOPE_MACHINE) {
         // Raise the priority of cloud machine policies only when the metapolicy

# Return generic values for WebGLDebugRendererInfo to remove a potential data
# leak while preventing potential website breakage

--- a/chrome/browser/ungoogled_flag_entries.h
+++ b/chrome/browser/ungoogled_flag_entries.h
@@ -136,4 +136,8 @@
      "Remove Client Hints",
      "Removes client hints (information sent to servers about your system, similar to a user agent). ungoogled-chromium flag.",
      kOsAll, FEATURE_VALUE_TYPE(blink::features::kRemoveClientHints)},
+    {"spoof-webgl-info",
+     "Spoof WebGL Info",
+     "Return generic values for WebGLDebugRendererInfo to remove a potential data leak while preventing potential website breakage. ungoogled-chromium flag.",
+     kOsAll, FEATURE_VALUE_TYPE(blink::features::kSpoofWebGLInfo)},
 #endif  // CHROME_BROWSER_UNGOOGLED_FLAG_ENTRIES_H_
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -23,6 +23,7 @@ namespace blink::features {
 BASE_FEATURE(kDisableLinkDrag, "DisableLinkDrag", base::FEATURE_DISABLED_BY_DEFAULT);
 BASE_FEATURE(kReducedSystemInfo, "ReducedSystemInfo", base::FEATURE_DISABLED_BY_DEFAULT);
 BASE_FEATURE(kRemoveClientHints, "RemoveClientHints", base::FEATURE_DISABLED_BY_DEFAULT);
+BASE_FEATURE(kSpoofWebGLInfo, "SpoofWebGLInfo", base::FEATURE_DISABLED_BY_DEFAULT);
 
 // -----------------------------------------------------------------------------
 // Feature definitions and associated constants (feature params, et cetera)
--- a/third_party/blink/public/common/features.h
+++ b/third_party/blink/public/common/features.h
@@ -23,6 +23,7 @@ namespace features {
 BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kDisableLinkDrag);
 BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kReducedSystemInfo);
 BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kRemoveClientHints);
+BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kSpoofWebGLInfo);
 
 // -----------------------------------------------------------------------------
 // Feature declarations and associated constants (feature params, et cetera)
--- a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
+++ b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
@@ -3864,6 +3864,8 @@ ScriptValue WebGLRenderingContextBase::g
               pname, IdentifiabilityBenignStringToken(
                          String(ContextGL()->GetString(GL_RENDERER))));
         }
+        if (base::FeatureList::IsEnabled(blink::features::kSpoofWebGLInfo))
+          return WebGLAny(script_state, String("ANGLE (Google, Vulkan 1.3.0 (SwiftShader Device (Subzero) (0x0000C0DE)), SwiftShader driver-5.0.0)"));
         return WebGLAny(script_state,
                         String(ContextGL()->GetString(GL_RENDERER)));
       }
@@ -3879,6 +3881,8 @@ ScriptValue WebGLRenderingContextBase::g
               pname, IdentifiabilityBenignStringToken(
                          String(ContextGL()->GetString(GL_VENDOR))));
         }
+        if (base::FeatureList::IsEnabled(blink::features::kSpoofWebGLInfo))
+          return WebGLAny(script_state, String("Google Inc. (Google)"));
         return WebGLAny(script_state,
                         String(ContextGL()->GetString(GL_VENDOR)));
       }

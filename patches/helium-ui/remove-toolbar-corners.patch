--- a/chrome/browser/ui/views/toolbar/toolbar_view.cc
+++ b/chrome/browser/ui/views/toolbar/toolbar_view.cc
@@ -271,18 +271,6 @@ void ToolbarView::Init() {
   aura::WindowOcclusionTracker::ScopedPause pause_occlusion;
 #endif
 
-  // The background views must be behind container_view_.
-  background_view_left_ = AddChildViewAt(std::make_unique<View>(), 0);
-  background_view_left_->SetBackground(
-      std::make_unique<TabstripLikeBackground>(browser_view_));
-  background_view_right_ = AddChildViewAt(std::make_unique<View>(), 0);
-  background_view_right_->SetBackground(
-      std::make_unique<TabstripLikeBackground>(browser_view_));
-
-  active_state_subscription_ =
-      GetWidget()->RegisterPaintAsActiveChangedCallback(base::BindRepeating(
-          &ToolbarView::ActiveStateChanged, base::Unretained(this)));
-
   auto location_bar = std::make_unique<LocationBarView>(
       browser_, browser_->profile(), browser_->command_controller(), this,
       display_mode_ != DisplayMode::NORMAL);
@@ -852,13 +840,6 @@ void ToolbarView::Layout(PassKey) {
   // The container view should be the exact same size/position as ToolbarView.
   container_view_->SetSize(size());
 
-  // The background views should be behind the top-left and top-right corners
-  // of the container_view_.
-  const int corner_radius = GetLayoutConstant(TOOLBAR_CORNER_RADIUS);
-  background_view_left_->SetBounds(0, 0, corner_radius, corner_radius);
-  background_view_right_->SetBounds(width() - corner_radius, 0, corner_radius,
-                                    corner_radius);
-
   if (display_mode_ == DisplayMode::CUSTOM_TAB) {
     custom_tab_bar_->SetBounds(0, 0, width(),
                                custom_tab_bar_->GetPreferredSize().height());
@@ -868,7 +849,6 @@ void ToolbarView::Layout(PassKey) {
 
   if (display_mode_ == DisplayMode::NORMAL) {
     LayoutCommon();
-    UpdateClipPath();
   }
 
   if (toolbar_controller_) {
@@ -906,50 +886,6 @@ void ToolbarView::OnThemeChanged() {
   SchedulePaint();
 }
 
-// The implementation of this method is subtle.
-// The goal is to create rounded corners in the top-left and top-right corners,
-// allowing background_view_left_ and background_view_right_ to peek through. In
-// order for the corners to look good, we must use antialiasing on the clip
-// paths. When there are fractional device scale factors (e.g. 1.5), it's easy
-// (common even) to have straight edges of the clip path end up on non-integral
-// boundaries (e.g. y=68.5). This is unavoidable. Antialiasing turns these
-// non-integral boundary clip paths into 2-pixel "fuzzy" boundaries, which in
-// turn causes misalignment with other views::Views which assume the boundaries
-// are exact. Solving this problem completely will require a rethink of how we
-// implement fractional device scale factors in Chrome. In the meanwhile, the
-// implementation of this method minimizes the length of straight edges of the
-// clip path to minimize issues. To do this we carve out the two corners, and
-// then take the inverse as our clip path.
-void ToolbarView::UpdateClipPath() {
-  const int corner_radius = GetLayoutConstant(TOOLBAR_CORNER_RADIUS);
-  SkPath path;
-  const gfx::Rect local_bounds = GetLocalBounds();
-
-  // Carve out top-left.
-  path.moveTo(0, 0);
-  path.lineTo(0, corner_radius);
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCW, corner_radius, 0);
-  path.lineTo(0, 0);
-
-  // Carve out top-right.
-  path.moveTo(local_bounds.width() - corner_radius, 0);
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCW, local_bounds.width(), corner_radius);
-  path.lineTo(local_bounds.width(), 0);
-  path.lineTo(local_bounds.width() - corner_radius, 0);
-
-  // Take the inverse so we keep everything else. Artifacts are confined to the
-  // corners.
-  path.setFillType(SkPathFillType::kInverseWinding);
-  container_view_->SetClipPath(path);
-}
-
-void ToolbarView::ActiveStateChanged() {
-  background_view_left_->SchedulePaint();
-  background_view_right_->SchedulePaint();
-}
-
 void ToolbarView::NewTabButtonPressed(const ui::Event& event) {
   chrome::ExecuteCommand(browser_view_->browser(), IDC_NEW_TAB);
   UMA_HISTOGRAM_ENUMERATION("Tab.NewTab",

--- a/chrome/browser/ui/tabs/tab_style.cc
+++ b/chrome/browser/ui/tabs/tab_style.cc
@@ -21,13 +21,13 @@ namespace {
 
 // Thickness in DIPs of the separator painted on the left and right edges of
 // the tab.
-constexpr int kChromeRefreshSeparatorThickness = 2;
+constexpr int kChromeRefreshSeparatorThickness = 1;
 constexpr int kChromeRefreshSeparatorHorizontalMargin = 2;
 // TODO (crbug.com/1451400): This constant should be in LayoutConstants.
 constexpr int kChromeRefreshSeparatorHeight = 16;
 
 // The padding from the top of the tab to the content area.
-constexpr int kChromeRefreshTabVerticalPadding = 6;
+constexpr int kChromeRefreshTabVerticalPadding = 7;
 constexpr int kChromeRefreshTabHorizontalPadding = 8;
 
 class ChromeRefresh2023TabStyle : public TabStyle {
@@ -107,11 +107,11 @@ int ChromeRefresh2023TabStyle::GetMinimumInactiveWidth() const {
 }
 
 int ChromeRefresh2023TabStyle::GetTopCornerRadius() const {
-  return 10;
+  return 8;
 }
 
 int ChromeRefresh2023TabStyle::GetBottomCornerRadius() const {
-  return 12;
+  return 8;
 }
 
 int ChromeRefresh2023TabStyle::GetTabOverlap() const {
--- a/chrome/browser/ui/views/tabs/tab_group_highlight.cc
+++ b/chrome/browser/ui/views/tabs/tab_group_highlight.cc
@@ -49,33 +49,7 @@ bool TabGroupHighlight::GetCanProcessEventsWithinSubtree() const {
 }
 
 SkPath TabGroupHighlight::GetPath() const {
-  // This path imitates the shape of a tab (see GM2TabStyle::GetPath()). It
-  // doesn't reuse the exact same GetPath() function because it doesn't need
-  // much of the complexity there. Group highlights only appear on group drag,
-  // which is a well-scoped interaction. A dragging group doesn't nestle in with
-  // the tabs around it, so there are no special cases needed when determining
-  // its shape.
-  const int corner_radius = TabStyle::Get()->GetBottomCornerRadius();
-  const int top = GetLayoutConstant(TAB_STRIP_PADDING);
-
   SkPath path;
-  path.moveTo(0, bounds().height());
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCCW, corner_radius,
-             bounds().height() - corner_radius);
-  path.lineTo(corner_radius, top + corner_radius);
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCW, 2 * corner_radius, top);
-  path.lineTo(bounds().width() - 2 * corner_radius, top);
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCW, bounds().width() - corner_radius,
-             top + corner_radius);
-  path.lineTo(bounds().width() - corner_radius,
-              bounds().height() - corner_radius);
-  path.arcTo(corner_radius, corner_radius, 0, SkPath::kSmall_ArcSize,
-             SkPathDirection::kCCW, bounds().width(), bounds().height());
-  path.close();
-
   return path;
 }
 
--- a/chrome/browser/ui/views/tabs/tab_style_views.cc
+++ b/chrome/browser/ui/views/tabs/tab_style_views.cc
@@ -213,8 +213,6 @@ SkPath TabStyleViewsImpl::GetPath(TabStyle::PathType path_type,
   CHECK(tab());
   const int stroke_thickness = GetStrokeThickness(force_active);
 
-  const TabStyle::TabSelectionState state = GetSelectionState();
-
   // We'll do the entire path calculation in aligned pixels.
   // TODO(dfried): determine if we actually want to use |stroke_thickness| as
   // the inset in this case.
@@ -227,250 +225,82 @@ SkPath TabStyleViewsImpl::GetPath(TabStyle::PathType path_type,
       GetTopCornerRadiusForWidth(tab()->width()) * scale;
   float extension_corner_radius = tab_style()->GetBottomCornerRadius() * scale;
 
-  // Selected, hover, and inactive tab fills are a detached squarcle tab.
-  if ((path_type == TabStyle::PathType::kFill &&
-       state != TabStyle::TabSelectionState::kActive) ||
-      path_type == TabStyle::PathType::kHighlight ||
-      path_type == TabStyle::PathType::kInteriorClip ||
-      path_type == TabStyle::PathType::kHitTest) {
-    // TODO (crbug.com/1451400): This constant should be unified with
-    // kCRtabstripRegionViewControlPadding in tab_strip_region_view.
-
-    float top_content_corner_radius = content_corner_radius;
-    float bottom_content_corner_radius = content_corner_radius;
-    float tab_height = GetLayoutConstant(TAB_HEIGHT) * scale;
-
-    // The tab displays favicon animations that can emerge from the toolbar. The
-    // interior clip needs to extend the entire height of the toolbar to support
-    // this. Detached tab shapes do not need to respect this.
-    if (path_type != TabStyle::PathType::kInteriorClip &&
-        path_type != TabStyle::PathType::kHitTest) {
-      tab_height -= GetLayoutConstant(TAB_STRIP_PADDING) * scale;
-      tab_height -= GetLayoutConstant(TABSTRIP_TOOLBAR_OVERLAP) * scale;
-    }
-
-    // Don't round the bottom corners to avoid creating dead space between tabs.
-    if (path_type == TabStyle::PathType::kHitTest) {
-      bottom_content_corner_radius = 0;
-    }
-
-    int left = aligned_bounds.x() + extension_corner_radius;
-    int top = aligned_bounds.y() + GetLayoutConstant(TAB_STRIP_PADDING) * scale;
-    int right = aligned_bounds.right() - extension_corner_radius;
-    const int bottom = top + tab_height;
-
-    // For maximized and full screen windows, extend the tab hit test to the top
-    // of the tab, encompassing the top padding. This makes it easy to click on
-    // tabs by moving the mouse to the top of the screen.
-    if (path_type == TabStyle::PathType::kHitTest &&
-        tab()->controller()->IsFrameCondensed()) {
-      top -= GetLayoutConstant(TAB_STRIP_PADDING) * scale;
-      // Don't round the top corners to avoid creating dead space between tabs.
-      top_content_corner_radius = 0;
-    }
+  float top_content_corner_radius = content_corner_radius;
+  float bottom_content_corner_radius = content_corner_radius;
+  float tab_height = GetLayoutConstant(TAB_HEIGHT) * scale;
 
-    // if the size of the space for the path is smaller than the size of a
-    // favicon or if we are building a path for the hit test, expand to take the
-    // entire width of the separator margins AND the separator.
-    if ((right - left) < (gfx::kFaviconSize * scale) ||
-        path_type == TabStyle::PathType::kHitTest) {
-      // Take the entire size of the separator. in odd separator size cases, the
-      // right side will take the remaining space.
-      const int left_separator_overlap =
-          tab_style()->GetSeparatorSize().width() / 2;
-      const int right_separator_overlap =
-          tab_style()->GetSeparatorSize().width() - left_separator_overlap;
-
-      // If there is a tab before this one, then expand into its overlap.
-      const Tab* const previous_tab =
-          tab()->controller()->GetAdjacentTab(tab(), -1);
-      if (previous_tab) {
-        left -= (tab_style()->GetSeparatorMargins().right() +
-                 left_separator_overlap) *
-                scale;
-      }
-
-      // If there is a tab after this one, then expand into its overlap.
-      const Tab* const next_tab = tab()->controller()->GetAdjacentTab(tab(), 1);
-      if (next_tab) {
-        right += (tab_style()->GetSeparatorMargins().left() +
-                  right_separator_overlap) *
-                 scale;
-      }
-    }
-
-    // Radii are clockwise from top left.
-    const SkVector radii[4] = {
-        SkVector(top_content_corner_radius, top_content_corner_radius),
-        SkVector(top_content_corner_radius, top_content_corner_radius),
-        SkVector(bottom_content_corner_radius, bottom_content_corner_radius),
-        SkVector(bottom_content_corner_radius, bottom_content_corner_radius)};
-    SkRRect rrect;
-    rrect.setRectRadii(SkRect::MakeLTRB(left, top, right, bottom), radii);
-    SkPath path;
-    path.addRRect(rrect);
-
-    // Convert path to be relative to the tab origin.
-    gfx::PointF origin(tab()->origin());
-    origin.Scale(scale);
-    path.offset(-origin.x(), -origin.y());
-
-    // Possibly convert back to DIPs.
-    if (render_units == TabStyle::RenderUnits::kDips && scale != 1.0f) {
-      path.transform(SkMatrix::Scale(1.0f / scale, 1.0f / scale));
-    }
-
-    return path;
+  // The tab displays favicon animations that can emerge from the toolbar. The
+  // interior clip needs to extend the entire height of the toolbar to support
+  // this. Detached tab shapes do not need to respect this.
+  if (path_type != TabStyle::PathType::kInteriorClip &&
+      path_type != TabStyle::PathType::kHitTest) {
+    tab_height -= GetLayoutConstant(TAB_STRIP_PADDING) * scale;
+    tab_height -= GetLayoutConstant(TABSTRIP_TOOLBAR_OVERLAP) * scale;
   }
 
-  // Compute |extension| as the width outside the separators.  This is a fixed
-  // value equal to the normal corner radius.
-  const float extension = extension_corner_radius;
-
-  // Calculate the bounds of the actual path.
-  const float left = aligned_bounds.x();
-  const float right = aligned_bounds.right();
-  float tab_top =
-      aligned_bounds.y() + GetLayoutConstant(TAB_STRIP_PADDING) * scale;
-  float tab_left = left + extension;
-  float tab_right = right - extension;
-
-  // Overlap the toolbar below us so that gaps don't occur when rendering at
-  // non-integral display scale factors.
-  const float extended_bottom = aligned_bounds.bottom();
-  const float bottom_extension =
-      GetLayoutConstant(TABSTRIP_TOOLBAR_OVERLAP) * scale;
-  float tab_bottom = extended_bottom - bottom_extension;
-
-  // Path-specific adjustments:
-  const float stroke_adjustment = stroke_thickness * scale;
-  bool extend_to_top = false;
-  if (path_type == TabStyle::PathType::kFill ||
-      path_type == TabStyle::PathType::kBorder) {
-    tab_left += 0.5f * stroke_adjustment;
-    tab_right -= 0.5f * stroke_adjustment;
-    tab_top += 0.5f * stroke_adjustment;
-    content_corner_radius -= 0.5f * stroke_adjustment;
-    tab_bottom -= 0.5f * stroke_adjustment;
-    extension_corner_radius -= 0.5f * stroke_adjustment;
+  // Don't round the bottom corners to avoid creating dead space between tabs.
+  if (path_type == TabStyle::PathType::kHitTest) {
+    bottom_content_corner_radius = 0;
   }
-  const ShapeModifier shape_modifier = GetShapeModifier(path_type);
-  const bool extend_left_to_bottom = shape_modifier & kNoLowerLeftArc;
-  const bool extend_right_to_bottom = shape_modifier & kNoLowerRightArc;
-  const bool compact_left_to_bottom =
-      !extend_left_to_bottom && (shape_modifier & kCompactLeftArc);
 
-  SkPath path;
+  int left = aligned_bounds.x() + extension_corner_radius;
+  int top = aligned_bounds.y() + GetLayoutConstant(TAB_STRIP_PADDING) * scale;
+  int right = aligned_bounds.right() - extension_corner_radius;
+  const int bottom = top + tab_height;
 
-  float left_extension_corner_radius = extension_corner_radius;
-  if (compact_left_to_bottom) {
-    left_extension_corner_radius = (tab_style()->GetBottomCornerRadius() -
-                                    GetLayoutConstant(TOOLBAR_CORNER_RADIUS)) *
-                                   scale;
+  // For maximized and full screen windows, extend the tab hit test to the top
+  // of the tab, encompassing the top padding. This makes it easy to click on
+  // tabs by moving the mouse to the top of the screen.
+  if (path_type == TabStyle::PathType::kHitTest &&
+      tab()->controller()->IsFrameCondensed()) {
+    top -= GetLayoutConstant(TAB_STRIP_PADDING) * scale;
+    // Don't round the top corners to avoid creating dead space between tabs.
+    top_content_corner_radius = 0;
   }
 
-  // Avoid mallocs at every new path verb by preallocating an
-  // empirically-determined amount of space in the verb and point buffers.
-  const int kMaxPathPoints = 20;
-  path.incReserve(kMaxPathPoints);
-
-  // We will go clockwise from the lower left. We start in the overlap region,
-  // preventing a gap between toolbar and tabstrip.
-  // TODO(dfried): verify that the we actually want to start the stroke for
-  // the exterior path outside the region; we might end up rendering an
-  // extraneous descending pixel on displays with odd scaling and nonzero
-  // stroke width.
-
-  // Start with the left side of the shape.
-  path.moveTo(left, extended_bottom);
-
-  if (tab_left != left) {
-    // Draw the left edge of the extension.
-    //   ╭─────────╮
-    //   │ Content │
-    // ┏─╯         ╰─┐
-    if (tab_bottom != extended_bottom) {
-      path.lineTo(left, tab_bottom);
-    }
-
-    // Draw the bottom-left corner.
-    //   ╭─────────╮
-    //   │ Content │
-    // ┌━╝         ╰─┐
-    if (extend_left_to_bottom) {
-      path.lineTo(tab_left, tab_bottom);
-    } else {
-      path.lineTo(tab_left - left_extension_corner_radius, tab_bottom);
-      path.arcTo(left_extension_corner_radius, left_extension_corner_radius, 0,
-                 SkPath::kSmall_ArcSize, SkPathDirection::kCCW, tab_left,
-                 tab_bottom - left_extension_corner_radius);
+  // if the size of the space for the path is smaller than the size of a
+  // favicon or if we are building a path for the hit test, expand to take the
+  // entire width of the separator margins AND the separator.
+  if ((right - left) < (gfx::kFaviconSize * scale) ||
+      path_type == TabStyle::PathType::kHitTest) {
+    // Take the entire size of the separator. in odd separator size cases, the
+    // right side will take the remaining space.
+    const int left_separator_overlap =
+        tab_style()->GetSeparatorSize().width() / 2;
+    const int right_separator_overlap =
+        tab_style()->GetSeparatorSize().width() - left_separator_overlap;
+
+    // If there is a tab before this one, then expand into its overlap.
+    const Tab* const previous_tab =
+        tab()->controller()->GetAdjacentTab(tab(), -1);
+    if (previous_tab) {
+      left -= (tab_style()->GetSeparatorMargins().right() +
+               left_separator_overlap) *
+              scale;
     }
-  }
-
-  // Draw the ascender and top-left curve, if present.
-  if (extend_to_top) {
-    //   ┎─────────╮
-    //   ┃ Content │
-    // ┌─╯         ╰─┐
-    path.lineTo(tab_left, tab_top);
-  } else {
-    //   ╔─────────╮
-    //   ┃ Content │
-    // ┌─╯         ╰─┐
-    path.lineTo(tab_left, tab_top + content_corner_radius);
-    path.arcTo(content_corner_radius, content_corner_radius, 0,
-               SkPath::kSmall_ArcSize, SkPathDirection::kCW,
-               tab_left + content_corner_radius, tab_top);
-  }
 
-  // Draw the top crossbar and top-right curve, if present.
-  if (extend_to_top) {
-    //   ┌━━━━━━━━━┑
-    //   │ Content │
-    // ┌─╯         ╰─┐
-    path.lineTo(tab_right, tab_top);
-  } else {
-    //   ╭━━━━━━━━━╗
-    //   │ Content │
-    // ┌─╯         ╰─┐
-    path.lineTo(tab_right - content_corner_radius, tab_top);
-    path.arcTo(content_corner_radius, content_corner_radius, 0,
-               SkPath::kSmall_ArcSize, SkPathDirection::kCW, tab_right,
-               tab_top + content_corner_radius);
-  }
-
-  if (tab_right != right) {
-    // Draw the descender and bottom-right corner.
-    //   ╭─────────╮
-    //   │ Content ┃
-    // ┌─╯         ╚━┐
-    if (extend_right_to_bottom) {
-      path.lineTo(tab_right, tab_bottom);
-    } else {
-      path.lineTo(tab_right, tab_bottom - extension_corner_radius);
-      path.arcTo(extension_corner_radius, extension_corner_radius, 0,
-                 SkPath::kSmall_ArcSize, SkPathDirection::kCCW,
-                 tab_right + extension_corner_radius, tab_bottom);
-    }
-    if (tab_bottom != extended_bottom) {
-      path.lineTo(right, tab_bottom);
+    // If there is a tab after this one, then expand into its overlap.
+    const Tab* const next_tab = tab()->controller()->GetAdjacentTab(tab(), 1);
+    if (next_tab) {
+      right += (tab_style()->GetSeparatorMargins().left() +
+                right_separator_overlap) *
+               scale;
     }
   }
 
-  // Draw anything remaining: the descender, the bottom right horizontal
-  // stroke, or the right edge of the extension, depending on which
-  // conditions fired above.
-  //   ╭─────────╮
-  //   │ Content │
-  // ┌─╯         ╰─┓
-  path.lineTo(right, extended_bottom);
-
-  if (path_type != TabStyle::PathType::kBorder) {
-    path.close();
-  }
+  // Radii are clockwise from top left.
+  const SkVector radii[4] = {
+      SkVector(top_content_corner_radius, top_content_corner_radius),
+      SkVector(top_content_corner_radius, top_content_corner_radius),
+      SkVector(bottom_content_corner_radius, bottom_content_corner_radius),
+      SkVector(bottom_content_corner_radius, bottom_content_corner_radius)};
+  SkRRect rrect;
+  rrect.setRectRadii(SkRect::MakeLTRB(left, top, right, bottom), radii);
+  SkPath path;
+  path.addRRect(rrect);
 
   // Convert path to be relative to the tab origin.
-  gfx::PointF origin(tab_->origin());
+  gfx::PointF origin(tab()->origin());
   origin.Scale(scale);
   path.offset(-origin.x(), -origin.y());
 

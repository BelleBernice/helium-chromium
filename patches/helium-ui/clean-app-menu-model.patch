--- a/chrome/browser/ui/toolbar/app_menu_model.cc
+++ b/chrome/browser/ui/toolbar/app_menu_model.cc
@@ -741,9 +741,6 @@ SaveAndShareSubMenuModel::SaveAndShareSu
     if (!sharing_hub::SharingIsDisabledByPolicy(browser->profile())) {
       AddItemWithStringIdAndVectorIcon(
           this, IDC_COPY_URL, IDS_APP_MENU_COPY_LINK, kLinkChromeRefreshIcon);
-      AddItemWithStringIdAndVectorIcon(this, IDC_SEND_TAB_TO_SELF,
-                                       IDS_MENU_SEND_TAB_TO_SELF,
-                                       kDevicesChromeRefreshIcon);
       AddItemWithStringIdAndVectorIcon(this, IDC_QRCODE_GENERATOR,
                                        IDS_APP_MENU_CREATE_QR_CODE,
                                        kQrCodeChromeRefreshIcon);
@@ -886,13 +883,6 @@ void ToolsMenuModel::Build(Browser* brow
 
   AddSeparator(ui::NORMAL_SEPARATOR);
 
-  AddItemWithStringIdAndVectorIcon(this, IDC_SHOW_READING_MODE_SIDE_PANEL,
-                                   IDS_SHOW_READING_MODE_SIDE_PANEL,
-                                   kMenuBookChromeRefreshIcon);
-  SetElementIdentifierAt(
-      GetIndexOfCommandId(IDC_SHOW_READING_MODE_SIDE_PANEL).value(),
-      kReadingModeMenuItem);
-
   AddSeparator(ui::NORMAL_SEPARATOR);
   if (!features::IsExtensionMenuInRootAppMenu()) {
     AddItemWithStringId(IDC_MANAGE_EXTENSIONS, IDS_SHOW_EXTENSIONS);
@@ -1769,32 +1759,6 @@ void AppMenuModel::Build() {
 
   AddSeparator(ui::NORMAL_SEPARATOR);
 
-#if !BUILDFLAG(IS_CHROMEOS)
-  sub_menus_.push_back(std::make_unique<ProfileSubMenuModel>(
-      this, browser()->profile(), browser()->window()->GetColorProvider()));
-  auto* const profile_submenu_model =
-      static_cast<ProfileSubMenuModel*>(sub_menus_.back().get());
-  AddSubMenu(IDC_PROFILE_MENU_IN_APP_MENU,
-             profile_submenu_model->profile_name(), profile_submenu_model);
-  SetIcon(GetIndexOfCommandId(IDC_PROFILE_MENU_IN_APP_MENU).value(),
-          profile_submenu_model->avatar_image_model());
-  SetElementIdentifierAt(
-      GetIndexOfCommandId(IDC_PROFILE_MENU_IN_APP_MENU).value(),
-      kProfileMenuItem);
-  AddSeparator(ui::SPACING_SEPARATOR);
-#endif
-
-  if (!browser_->profile()->IsGuestSession()) {
-    sub_menus_.push_back(
-        std::make_unique<PasswordsAndAutofillSubMenuModel>(this));
-    AddSubMenuWithStringIdAndVectorIcon(
-        this, IDC_PASSWORDS_AND_AUTOFILL_MENU, IDS_PASSWORDS_AND_AUTOFILL_MENU,
-        sub_menus_.back().get(), vector_icons::kPasswordManagerIcon);
-    SetElementIdentifierAt(
-        GetIndexOfCommandId(IDC_PASSWORDS_AND_AUTOFILL_MENU).value(),
-        kPasswordAndAutofillMenuItem);
-  }
-
   if (!browser_->profile()->IsOffTheRecord()) {
     auto recent_tabs_sub_menu =
         std::make_unique<RecentTabsSubMenuModel>(provider_, browser_);
@@ -1833,15 +1797,11 @@ void AppMenuModel::Build() {
         kTabGroupsMenuItem);
   }
 
-  if (features::IsExtensionMenuInRootAppMenu()) {
-    // Extensions sub menu.
-    sub_menus_.push_back(std::make_unique<ExtensionsMenuModel>(this, browser_));
-    AddSubMenuWithStringIdAndVectorIcon(
-        this, IDC_EXTENSIONS_SUBMENU, IDS_EXTENSIONS_SUBMENU,
-        sub_menus_.back().get(), vector_icons::kExtensionChromeRefreshIcon);
-    SetElementIdentifierAt(GetIndexOfCommandId(IDC_EXTENSIONS_SUBMENU).value(),
-                           kExtensionsMenuItem);
-  }
+  AddItemWithStringIdAndVectorIcon(
+      this, IDC_EXTENSIONS_SUBMENU_MANAGE_EXTENSIONS,
+      IDS_EXTENSIONS_SUBMENU,
+      vector_icons::kExtensionChromeRefreshIcon);
+
   AddItemWithStringIdAndVectorIcon(this, IDC_CLEAR_BROWSING_DATA,
                                    IDS_CLEAR_BROWSING_DATA,
                                    kTrashCanRefreshIcon);
@@ -1869,9 +1829,6 @@ void AppMenuModel::Build() {
   }
 #endif
 
-  AddItemWithStringIdAndVectorIcon(this, IDC_SHOW_TRANSLATE, IDS_SHOW_TRANSLATE,
-                                   kTranslateIcon);
-
   CreateFindAndEditSubMenu();
 
   sub_menus_.push_back(
@@ -1912,11 +1869,7 @@ void AppMenuModel::Build() {
   AddSubMenuWithStringIdAndVectorIcon(this, IDC_HELP_MENU, IDS_HELP_MENU,
                                       sub_menus_.back().get(), kHelpMenuIcon);
 #else
-#if BUILDFLAG(IS_CHROMEOS)
-  AddItem(IDC_ABOUT, l10n_util::GetStringUTF16(IDS_ABOUT));
-#else
-  AddItem(IDC_ABOUT, l10n_util::GetStringUTF16(IDS_ABOUT));
-#endif
+  AddItemWithStringIdAndVectorIcon(this, IDC_ABOUT, IDS_ABOUT, kHelpMenuIcon);
 #endif
 
   AddItemWithStringIdAndVectorIcon(this, IDC_OPTIONS, IDS_SETTINGS,
